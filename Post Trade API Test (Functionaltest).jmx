<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Post Trade API Test (AsiaNext)">
      <boolProp name="TestPlan.functional_mode">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
        <collectionProp name="Arguments.arguments">
          <elementProp name="auth_token" elementType="Argument">
            <stringProp name="Argument.name">auth_token</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="refreshToken" elementType="Argument">
            <stringProp name="Argument.name">refreshToken</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="client_id" elementType="Argument">
            <stringProp name="Argument.name">client_id</stringProp>
            <stringProp name="Argument.value">PostTradeAPIUser</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="client_secret" elementType="Argument">
            <stringProp name="Argument.name">client_secret</stringProp>
            <stringProp name="Argument.value">Password123!</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="query" elementType="Argument">
            <stringProp name="Argument.name">query</stringProp>
            <stringProp name="Argument.value">&quot;eyJ0eXAiOiJKV1MiLCJhbGciOiJIUzI1NiJ9.eyJwcmluY2lwYWxDb2RlIjoiIn0.i3CwlyT5nv4o_QQsdb6usqmR5cUJnccVcv5NMLCpJ6A&quot;</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="secret_key" elementType="Argument">
            <stringProp name="Argument.name">secret_key</stringProp>
            <stringProp name="Argument.value">ItqxBQjdoWTyKE6XYDNjz5zmkzFLz1UaVZdQ6wp9D47lqyDit2DEb5t6Q4h1iiwor66PHyF4zs7HgvXKx6I1xA==</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="env" elementType="Argument">
            <stringProp name="Argument.name">env</stringProp>
            <stringProp name="Argument.value">uat</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="base_url" elementType="Argument">
            <stringProp name="Argument.name">base_url</stringProp>
            <stringProp name="Argument.value">https://post-trade-api.{{env}}.asianext.{{port}}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">aws</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
    </TestPlan>
    <hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </SetupThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="secret_key" elementType="Argument">
              <stringProp name="Argument.name">secret_key</stringProp>
              <stringProp name="Argument.value">ItqxBQjdoWTyKE6XYDNjz5zmkzFLz1UaVZdQ6wp9D47lqyDit2DEb5t6Q4h1iiwor66PHyF4zs7HgvXKx6I1xA==</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="query" elementType="Argument">
              <stringProp name="Argument.name">query</stringProp>
              <stringProp name="Argument.value">123</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="filename">C:/Users/Splpt 708/Desktop/LapTopBackUP02-07-2024/AsiaNext-APi/user credentials.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">clientId,clientSecret</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
          <stringProp name="HTTPSampler.domain">post-trade-api.uat.asianext.aws</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/auth/v1/account/login</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;clientId&quot;: &quot;${clientId}&quot;, &#xd;
	&quot;clientSecret&quot;: &quot;${clientSecret}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="authToken" enabled="true">
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.referenceNames">authToken</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">value.accessToken</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Adding_Auth_token_to_property" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import java.util.regex.*;

// Extract token using Regular Expression Extractor
String authToken = vars.get(&quot;authToken&quot;);

// Set the extracted token as a property
if (authToken != null) {
    props.put(&quot;authToken&quot;, authToken);
}


</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Checking wether the Auth token is generated, if generated print the auth token" enabled="false">
            <stringProp name="BeanShellAssertion.query">// Import required classes
import org.apache.jmeter.assertions.AssertionResult;

// Retrieve the extracted authToken variable from JMeter context
String authToken = vars.get(&quot;authToken&quot;);

// Check if the authToken is null or empty
if (authToken == null || authToken.isEmpty()) {
    AssertionResult result = new AssertionResult(&quot;AuthToken Assertion&quot;);
    result.setFailureMessage(&quot;AuthToken is missing or empty&quot;);
    result.setFailure(true);
    AssertionResult.add(result);
} else {
    // Log the generated authToken for verification
    log.info(&quot;authToken Generated in login: &quot; + authToken);
}

// Add more custom validation logic as needed
//fetching response code
//log.info(&quot;Response code :&quot; + ctx.getPreviousResult().getResponseCode());</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Checking Response Code -200">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assertion_Login_Request">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">// Import required classes
import org.apache.jmeter.assertions.AssertionResult;

// Retrieve the extracted authToken variable from JMeter context
String authToken = vars.get(&quot;authToken&quot;);

// Check if the authToken is null or empty
if (authToken == null || authToken.isEmpty()) {
    AssertionResult result = new AssertionResult(&quot;AuthToken Assertion&quot;);
    result.setFailureMessage(&quot;AuthToken is missing or empty&quot;);
    result.setFailure(true);
    AssertionResult.add(result);
} else {
    // Log the generated authToken for verification
    log.info(&quot;authToken Generated in login: &quot; + authToken);
}

// Add more custom validation logic as needed
//fetching response code
//log.info(&quot;Response code :&quot; + ctx.getPreviousResult().getResponseCode());</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GET AUTH TOKEN" enabled="false">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <longProp name="ThreadGroup.delay">0</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">stoptestnow</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="secret_key" elementType="Argument">
              <stringProp name="Argument.name">secret_key</stringProp>
              <stringProp name="Argument.value">ItqxBQjdoWTyKE6XYDNjz5zmkzFLz1UaVZdQ6wp9D47lqyDit2DEb5t6Q4h1iiwor66PHyF4zs7HgvXKx6I1xA==</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="query" elementType="Argument">
              <stringProp name="Argument.name">query</stringProp>
              <stringProp name="Argument.value">123</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="filename">C:/Users/Splpt 708/Desktop/LapTopBackUP02-07-2024/AsiaNext-APi/user credentials.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">clientId,clientSecret</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
          <stringProp name="HTTPSampler.domain">post-trade-api.uat.asianext.aws</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/auth/v1/account/login</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;clientId&quot;: &quot;${clientId}&quot;, &#xd;
	&quot;clientSecret&quot;: &quot;${clientSecret}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="authToken" enabled="true">
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.referenceNames">authToken</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">value.accessToken</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="refreshToken" enabled="false">
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.referenceNames">refreshToken</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">value.refreshToken</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Adding Auth token to property" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import java.util.regex.*;

// Extract token using Regular Expression Extractor
String authToken = vars.get(&quot;authToken&quot;);

// Set the extracted token as a property
if (authToken != null) {
    props.put(&quot;authToken&quot;, authToken);
}
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Checking wether the Auth token is generated, if generated print the auth token" enabled="true">
            <stringProp name="BeanShellAssertion.query">// Import required classes
import org.apache.jmeter.assertions.AssertionResult;

// Retrieve the extracted authToken variable from JMeter context
String authToken = vars.get(&quot;authToken&quot;);

// Check if the authToken is null or empty
if (authToken == null || authToken.isEmpty()) {
    AssertionResult result = new AssertionResult(&quot;AuthToken Assertion&quot;);
    result.setFailureMessage(&quot;AuthToken is missing or empty&quot;);
    result.setFailure(true);
    AssertionResult.add(result);
} else {
    // Log the generated authToken for verification
    log.info(&quot;authToken Generated in login: &quot; + authToken);
}

// Add more custom validation logic as needed
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Checking Response Code -200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">240000</stringProp>
            <stringProp name="TestPlan.comments">240000 = 4 mins</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
        <intProp name="calcMode">1</intProp>
        <doubleProp>
          <name>throughput</name>
          <value>12000.0</value>
          <savedValue>0.0</savedValue>
        </doubleProp>
      </ConstantThroughputTimer>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Transactions" enabled="true">
        <stringProp name="TestPlan.comments">300= 5mins</stringProp>
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <longProp name="ThreadGroup.duration">1200</longProp>
        <longProp name="ThreadGroup.delay">0</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="position">
          <stringProp name="HTTPSampler.domain">post-trade-api.uat.asianext.aws</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/clearing/v1/position</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${queryvariable}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${__P(authToken)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pssing_JWS_token_to_queryvariable" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import javax.crypto.Mac
import javax.crypto.spec.SecretKeySpec
import org.apache.commons.codec.binary.Base64
import groovy.json.JsonOutput

// Function to perform JWS signing
def jwsSign(options) {
    def header = options.header
    def payload = options.payload
    def secret = options.secret

    // Convert the header and payload to JSON strings
    def encodedHeader = JsonOutput.toJson(header)
    def encodedPayload = JsonOutput.toJson(payload)

    // Base64url encode the header and payload
    //def headerBase64 = base64urlEncode(encodedHeader)
    //def payloadBase64 = base64urlEncode(encodedPayload)

     def headerBase64 = encodedHeader
     def payloadBase64 = encodedPayload
    
    // Create the signing input
    def signingInput = &quot;${headerBase64}.${payloadBase64}&quot;

    // Compute the HMAC-SHA256 signature
    def signature = hmacSha256(signingInput, secret)
    def base64urlSignature = base64urlEncode(signature.bytes)

    // Construct the JWS token
    return &quot;${signingInput}.${base64urlSignature}&quot;
}

// Utility function to encode a string as base64url
def base64urlEncode(str) {
    Base64.encodeBase64URLSafeString(str.getBytes(&quot;UTF-8&quot;))
}

// HMAC-SHA256 signature function
def hmacSha256(data, key) {
    Mac mac = Mac.getInstance(&quot;HmacSHA256&quot;)
    SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(&quot;UTF-8&quot;), &quot;HmacSHA256&quot;)
    mac.init(secretKeySpec)
    byte[] doFinal = mac.doFinal(data.getBytes(&quot;UTF-8&quot;))
    return doFinal.encodeBase64().toString()
}

// Define your header and payload
def header = [&quot;typ&quot;: &apos;JWS&apos;, &quot;alg&quot;: &apos;HS256&apos;]
def payload = [&quot;principalCode&quot;:&quot;&quot;]

// Retrieve the secret key from JMeter variables
def secretKey = vars.get(&quot;secret_key&quot;)

// Options for JWS signing
def options = [
  header: header,
  payload: payload,
  secret: secretKey
]

// Generate the JWS token
//def jwsToken = jwsSign(options)

// Set the JWS token as a JMeter variable
//vars.put(&quot;query&quot;, JsonOutput.toJson(jwsToken))

vars.put(&quot;queryvariable&quot;, &quot;\&quot;eyJ0eXAiOiJKV1MiLCJhbGciOiJIUzI1NiJ9.eyJwcmluY2lwYWxDb2RlIjoiIn0.i3CwlyT5nv4o_QQsdb6usqmR5cUJnccVcv5NMLCpJ6A\&quot;&quot;)
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assertion_Position_Request">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">// Import necessary JMeter classes
import org.apache.jmeter.assertions.AssertionResult
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.protocol.http.control.Header
import org.apache.jmeter.protocol.http.control.HeaderManager

// Retrieve the authToken variable from JMeter variables
String authToken = vars.get(&quot;authToken&quot;)

// Log indicating the start of the position
log.info(&quot;======== Position start ========&quot;)

// Get the previous SampleResult
SampleResult sampleResult = ctx.getPreviousResult()

// Check if SampleResult is not null
if (sampleResult != null) {
    // Assert response code
    String responseCode = sampleResult.getResponseCode()
    log.info(&quot;Response Code: &quot; + responseCode)
    AssertionResult responseCodeAssertion = new AssertionResult(&quot;TC_PR_01 - Response Code Check&quot;)
    responseCodeAssertion.setFailure(!&quot;200&quot;.equals(responseCode))
    responseCodeAssertion.setFailureMessage(&quot;Expected response code 200 but got &quot; + responseCode)
    if (!responseCodeAssertion.isFailure()) {
        log.info(&quot;Response code assertion: Passed&quot;)
    }
    sampleResult.addAssertionResult(responseCodeAssertion)

    // Assert response message
    String responseMessage = sampleResult.getResponseMessage()
    log.info(&quot;Response Message: &quot; + responseMessage)
    AssertionResult responseMessageAssertion = new AssertionResult(&quot;TC_PR_02 - Response Message Check&quot;)
    responseMessageAssertion.setFailure(!&quot;OK&quot;.equalsIgnoreCase(responseMessage))
    responseMessageAssertion.setFailureMessage(&quot;Expected response message &apos;OK&apos; but got &quot; + responseMessage)
    if (!responseMessageAssertion.isFailure()) {
        log.info(&quot;Response message assertion: Passed&quot;)
    }
    sampleResult.addAssertionResult(responseMessageAssertion)

    // Example: Extracting and checking all keys and values from the response body
    def responseBody = sampleResult.getResponseDataAsString() // Assuming response body is JSON
    log.info(&quot;Response Body: &quot; + responseBody)

    // Parse the responseBody
    def parsedBody = new groovy.json.JsonSlurper().parseText(responseBody)

    // Iterate over each key-value pair in the parsed body
    parsedBody.each { key, value -&gt;
        // Initialize assertion result
        def assertionResult = new AssertionResult()

        // Check each key and set appropriate test case name and assertion
        switch (key) {
            case &quot;message&quot;:
                assertionResult = new AssertionResult(&quot;TC_PR_06 - Message Value Check&quot;)
                if (value == null) {
                    assertionResult.setFailure(true)
                    assertionResult.setFailureMessage(&quot;&apos;message&apos; value is null.&quot;)
                    log.warn(&quot;&apos;message&apos; assertion: Failed for null&quot;)
                } else if (value instanceof List &amp;&amp; value.isEmpty()) {
                    assertionResult.setFailure(true)
                    assertionResult.setFailureMessage(&quot;&apos;message&apos; value is an empty list.&quot;)
                    log.warn(&quot;&apos;message&apos; assertion: Failed for empty&quot;)
                } else if (!(value instanceof List)) {
                    assertionResult.setFailure(true)
                    assertionResult.setFailureMessage(&quot;&apos;message&apos; value is not a list.&quot;)
                    log.warn(&quot;&apos;message&apos; assertion: Failed for non-list&quot;)
                } else {
                    assertionResult.setFailure(false)
                    log.info(&quot;&apos;message&apos; assertion: Passed&quot;)
                }
                break

            case &quot;note&quot;:
                assertionResult = new AssertionResult(&quot;TC_PR_07 - Note Value Check&quot;)
                if (value == null) {
                    assertionResult.setFailure(true)
                    assertionResult.setFailureMessage(&quot;&apos;note&apos; value is null.&quot;)
                    log.warn(&quot;&apos;note&apos; assertion: Failed for null&quot;)
                } else if (&quot;No positions found.&quot;.equals(value)) {
                    assertionResult.setFailure(false)
                    log.info(&quot;&apos;note&apos; assertion: Passed&quot;)
                } else {
                    assertionResult.setFailure(true)
                    assertionResult.setFailureMessage(&quot;Unexpected value for &apos;note&apos;: ${value}&quot;)
                    log.warn(&quot;&apos;note&apos; assertion: Failed for unexpected value: ${value}&quot;)
                }
                break

            case &quot;signature&quot;:
                assertionResult = new AssertionResult(&quot;TC_PR_08 - Signature Value Check&quot;)
                if (value == null) {
                    assertionResult.setFailure(true)
                    assertionResult.setFailureMessage(&quot;&apos;signature&apos; value is null.&quot;)
                    log.warn(&quot;&apos;signature&apos; assertion: Failed for null&quot;)
                } else if (!(value instanceof String)) {
                    assertionResult.setFailure(true)
                    assertionResult.setFailureMessage(&quot;&apos;signature&apos; value is not a String.&quot;)
                    log.warn(&quot;&apos;signature&apos; assertion: Failed for non-String. Type is: &quot; + value.getClass().getName())
                } else {
                    assertionResult.setFailure(false)
                    log.info(&quot;&apos;signature&apos; assertion: Passed. Type is: &quot; + value.getClass().getName())
                }
                break

            default:
                log.info(&quot;Unhandled key: ${key}&quot;)
                // Continue to handle other keys as needed
                break
        }

        // Add the assertion result to the sample result
        sampleResult.addAssertionResult(assertionResult)
    }

    // Get the current sampler and its HeaderManager
    org.apache.jmeter.samplers.Sampler sampler = ctx.getCurrentSampler()
    HeaderManager headerManager = sampler.getHeaderManager()

    // Check if HeaderManager is not null
    if (headerManager != null) {
        boolean authHeaderFound = false

        // Loop through headers to find &quot;Authorization&quot;
        for (int i = 0; i &lt; headerManager.size(); i++) {
            Header header = headerManager.get(i)

            // Check if the header name is &quot;Authorization&quot;
            if (&quot;Authorization&quot;.equalsIgnoreCase(header.getName())) {
                log.info(&quot;Authorization header value before hitting the Position: &quot; + header.getValue())
                authHeaderFound = true
                break // Exit loop once &quot;Authorization&quot; header is found
            }
        }

        // Log a warning if &quot;Authorization&quot; header is not found
        if (!authHeaderFound) {
            log.warn(&quot;Authorization header not found in the Position headers.&quot;)

            // Create an AssertionResult object and set the failure
            AssertionResult assertionResult = new AssertionResult(&quot;TC_PR_03 - Authorization Header Check&quot;)
            assertionResult.setFailure(true)
            assertionResult.setFailureMessage(&quot;Authorization header not found in the Position headers.&quot;)

            // Add the assertion result to the sample result
            sampleResult.addAssertionResult(assertionResult)
        } else {
            // Set success message for authorization header check
            AssertionResult assertionResult = new AssertionResult(&quot;TC_PR_03 - Authorization Header Check&quot;)
            assertionResult.setFailure(false)
            assertionResult.setFailureMessage(&quot;Authorization header found in the Position headers&quot;)
            sampleResult.addAssertionResult(assertionResult)
            log.info(&quot;Authorization header assertion: Passed&quot;)
        }
    } else {
        // Log a warning if no HeaderManager is found
        log.warn(&quot;No HeaderManager found.&quot;)

        // Create an AssertionResult object and set the failure
        AssertionResult assertionResult = new AssertionResult(&quot;TC_PR_04 - HeaderManager Check&quot;)
        assertionResult.setFailure(true)
        assertionResult.setFailureMessage(&quot;No HeaderManager found.&quot;)

        // Add the assertion result to the sample result
        sampleResult.addAssertionResult(assertionResult)
    }
} else {
    // Log a warning if no SampleResult is found
    log.warn(&quot;No previous SampleResult found.&quot;)

    // Create an AssertionResult object and set the failure
    AssertionResult assertionResult = new AssertionResult(&quot;TC_PR_05 - SampleResult Check&quot;)
    assertionResult.setFailure(true)
    assertionResult.setFailureMessage(&quot;No previous SampleResult found.&quot;)

    // Add the assertion result to the sample result
    if (sampleResult != null) {
        sampleResult.addAssertionResult(assertionResult)
    }
}
log.info(&quot;======== Position end ========&quot;)
// Example of logging custom message
String logMessage = &quot;position assertion Logged successfully&quot;
log.info(logMessage)
</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="active-principal" enabled="true">
          <stringProp name="HTTPSampler.domain">post-trade-api.uat.asianext.aws</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/clearing/v1/active-principal</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${__P(authToken)}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assertion_active_principal_Request">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">// Import necessary JMeter classes
import org.apache.jmeter.assertions.AssertionResult
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.protocol.http.control.Header
import org.apache.jmeter.protocol.http.control.HeaderManager

// Retrieve the authToken variable from JMeter variables
String authToken = vars.get(&quot;authToken&quot;)

// Log indicating the start of the active-principal
log.info(&quot;======== active-principal start ========&quot;)

// Get the previous SampleResult
SampleResult sampleResult = ctx.getPreviousResult()

// Check if SampleResult is not null
if (sampleResult != null) {
    // Assert response code
    String responseCode = sampleResult.getResponseCode()
    log.info(&quot;Response Code: &quot; + responseCode)
    AssertionResult responseCodeAssertion = new AssertionResult(&quot;TC_APR_01 - Response Code Check&quot;)
    responseCodeAssertion.setFailure(!&quot;200&quot;.equals(responseCode))
    responseCodeAssertion.setFailureMessage(&quot;Expected response code 200 but got &quot; + responseCode)
    if (!responseCodeAssertion.isFailure()) {
        log.info(&quot;Response code assertion: Passed&quot;)
    }
    sampleResult.addAssertionResult(responseCodeAssertion)

    // Assert response message
    String responseMessage = sampleResult.getResponseMessage()
    log.info(&quot;Response Message: &quot; + responseMessage)
    AssertionResult responseMessageAssertion = new AssertionResult(&quot;TC_APR_02 - Response Message Check&quot;)
    responseMessageAssertion.setFailure(!&quot;OK&quot;.equalsIgnoreCase(responseMessage))
    responseMessageAssertion.setFailureMessage(&quot;Expected response message &apos;OK&apos; but got &quot; + responseMessage)
    if (!responseMessageAssertion.isFailure()) {
        log.info(&quot;Response message assertion: Passed&quot;)
    }
    sampleResult.addAssertionResult(responseMessageAssertion)

    // Example: Extracting and checking all keys and values from the response body
    def responseBody = sampleResult.getResponseDataAsString() // Assuming response body is JSON
    log.info(&quot;Response Body: &quot; + responseBody)

    // Parse the responseBody
    def parsedBody = new groovy.json.JsonSlurper().parseText(responseBody)

    // Initialize assertion results for memberCode and memberName
    AssertionResult memberCodeAssertion = new AssertionResult(&quot;TC_APR_06 - Member Code Check&quot;)
    AssertionResult memberNameAssertion = new AssertionResult(&quot;TC_APR_07 - Member Name Check&quot;)

    // Check memberCode
    if (parsedBody.message instanceof List &amp;&amp; !parsedBody.message.isEmpty()) {
        def message = parsedBody.message[0]
        if (message.memberCode == null) {
            memberCodeAssertion.setFailure(true)
            memberCodeAssertion.setFailureMessage(&quot;&apos;memberCode&apos; is null.&quot;)
            log.warn(&quot;&apos;memberCode&apos; assertion: Failed for null&quot;)
        } else {
            memberCodeAssertion.setFailure(false)
            log.info(&quot;&apos;memberCode&apos; (${message.memberCode.getClass().getSimpleName()}): &quot; + message.memberCode)
            log.info(&quot;&apos;memberCode&apos; assertion: Passed&quot;)
        }
        if (message.memberName == null) {
            memberNameAssertion.setFailure(true)
            memberNameAssertion.setFailureMessage(&quot;&apos;memberName&apos; is null.&quot;)
            log.warn(&quot;&apos;memberName&apos; assertion: Failed for null&quot;)
        } else {
            memberNameAssertion.setFailure(false)
            log.info(&quot;&apos;memberName&apos; (${message.memberName.getClass().getSimpleName()}): &quot; + message.memberName)
            log.info(&quot;&apos;memberName&apos; assertion: Passed&quot;)
        }
    } else {
        memberCodeAssertion.setFailure(true)
        memberCodeAssertion.setFailureMessage(&quot;&apos;message&apos; is either not a list or empty.&quot;)
        log.warn(&quot;&apos;memberCode&apos; and &apos;memberName&apos; assertions skipped due to invalid &apos;message&apos; structure.&quot;)
    }

    // Add memberCode and memberName assertions to sample result
    sampleResult.addAssertionResult(memberCodeAssertion)
    sampleResult.addAssertionResult(memberNameAssertion)

    // Check clientCode and clientName
    AssertionResult clientCodeAssertion = new AssertionResult(&quot;TC_APR_08 - Client Code Check&quot;)
    AssertionResult clientNameAssertion = new AssertionResult(&quot;TC_APR_09 - Client Name Check&quot;)

    // Ensure clientCode is null or empty
    if (parsedBody.clientCode == null) {
        clientCodeAssertion.setFailure(false)
        log.info(&quot;&apos;clientCode&apos; is null.&quot;)
    } else if (parsedBody.clientCode.isEmpty()) {
        clientCodeAssertion.setFailure(false)
        log.info(&quot;&apos;clientCode&apos; is empty.&quot;)
    } else {
        clientCodeAssertion.setFailure(true)
        clientCodeAssertion.setFailureMessage(&quot;&apos;clientCode&apos; is non-null: ${parsedBody.clientCode}&quot;)
        log.warn(&quot;&apos;clientCode&apos; (${parsedBody.clientCode.getClass().getSimpleName()}): &quot; + parsedBody.clientCode)
        log.warn(&quot;&apos;clientCode&apos; assertion: Failed for non-null value&quot;)
    }

    // Ensure clientName is null or empty
    if (parsedBody.clientName == null) {
        clientNameAssertion.setFailure(false)
        log.info(&quot;&apos;clientName&apos; is null.&quot;)
    } else if (parsedBody.clientName.isEmpty()) {
        clientNameAssertion.setFailure(false)
        log.info(&quot;&apos;clientName&apos; is empty.&quot;)
    } else {
        clientNameAssertion.setFailure(true)
        clientNameAssertion.setFailureMessage(&quot;&apos;clientName&apos; is non-null: ${parsedBody.clientName}&quot;)
        log.warn(&quot;&apos;clientName&apos; (${parsedBody.clientName.getClass().getSimpleName()}): &quot; + parsedBody.clientName)
        log.warn(&quot;&apos;clientName&apos; assertion: Failed for non-null value&quot;)
    }

    // Add clientCode and clientName assertions to sample result
    sampleResult.addAssertionResult(clientCodeAssertion)
    sampleResult.addAssertionResult(clientNameAssertion)

    // Assert response signature
    String responseSignature = parsedBody.signature
    log.info(&quot;Signature: &quot; + responseSignature)
    AssertionResult signatureAssertion = new AssertionResult(&quot;TC_APR_10 - Signature Check&quot;)
    if (responseSignature == null) {
        signatureAssertion.setFailure(true)
        signatureAssertion.setFailureMessage(&quot;Signature is null.&quot;)
        log.warn(&quot;Signature assertion: Failed for null&quot;)
    } else if (!(responseSignature instanceof String)) {
        signatureAssertion.setFailure(true)
        signatureAssertion.setFailureMessage(&quot;Signature is not a String.&quot;)
        log.warn(&quot;Signature assertion: Failed for non-String&quot;)
    } else {
        signatureAssertion.setFailure(false)
        log.info(&quot;Signature (${responseSignature.getClass().getSimpleName()}): &quot; + responseSignature)
        log.info(&quot;Signature assertion: Passed&quot;)
    }
    sampleResult.addAssertionResult(signatureAssertion)

    // Get the current sampler and its HeaderManager
    org.apache.jmeter.samplers.Sampler sampler = ctx.getCurrentSampler()
    HeaderManager headerManager = sampler.getHeaderManager()

    // Check if HeaderManager is not null
    if (headerManager != null) {
        boolean authHeaderFound = false

        // Loop through headers to find &quot;Authorization&quot;
        for (int i = 0; i &lt; headerManager.size(); i++) {
            Header header = headerManager.get(i)

            // Check if the header name is &quot;Authorization&quot;
            if (&quot;Authorization&quot;.equalsIgnoreCase(header.getName())) {
                log.info(&quot;Authorization header value before hitting the Position: &quot; + header.getValue())
                authHeaderFound = true
                break // Exit loop once &quot;Authorization&quot; header is found
            }
        }

        // Log a warning if &quot;Authorization&quot; header is not found
        if (!authHeaderFound) {
            log.warn(&quot;Authorization header not found in the Position headers.&quot;)

            // Create an AssertionResult object and set the failure
            AssertionResult assertionResult = new AssertionResult(&quot;TC_APR_03 - Authorization Header Check&quot;)
            assertionResult.setFailure(true)
            assertionResult.setFailureMessage(&quot;Authorization header not found in the Position headers.&quot;)

            // Add the assertion result to the sample result
            sampleResult.addAssertionResult(assertionResult)
        } else {
            // Set success message for authorization header check
            AssertionResult assertionResult = new AssertionResult(&quot;TC_APR_03 - Authorization Header Check&quot;)
            assertionResult.setFailure(false)
            assertionResult.setFailureMessage(&quot;Authorization header found in the Position headers&quot;)
            sampleResult.addAssertionResult(assertionResult)
            log.info(&quot;Authorization header assertion: Passed&quot;)
        }
    } else {
        // Log a warning if no HeaderManager is found
        log.warn(&quot;No HeaderManager found.&quot;)

        // Create an AssertionResult object and set the failure
        AssertionResult assertionResult = new AssertionResult(&quot;TC_APR_04 - HeaderManager Check&quot;)
        assertionResult.setFailure(true)
        assertionResult.setFailureMessage(&quot;No HeaderManager found.&quot;)

        // Add the assertion result to the sample result
        sampleResult.addAssertionResult(assertionResult)
    }
} else {
    // Log a warning if no SampleResult is found
    log.warn(&quot;No previous SampleResult found.&quot;)

    // Create an AssertionResult object and set the failure
    AssertionResult assertionResult = new AssertionResult(&quot;TC_APR_05 - SampleResult Check&quot;)
    assertionResult.setFailure(true)
    assertionResult.setFailureMessage(&quot;No previous SampleResult found.&quot;)

    // Add the assertion result to the sample result
    if (sampleResult != null) {
        sampleResult.addAssertionResult(assertionResult)
    }
}

log.info(&quot;======== active-principal end ========&quot;)
// Example of logging custom message
String logMessage = &quot;active-principal Logged successfully&quot;
log.info(logMessage)
</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="call-account-statement" enabled="true">
          <stringProp name="HTTPSampler.domain">post-trade-api.uat.asianext.aws</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/clearing/v1/call-account-statement</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${queryvariable}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${__P(authToken)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pssing_JWS_token_to_queryvariable" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import javax.crypto.Mac
import javax.crypto.spec.SecretKeySpec
import org.apache.commons.codec.binary.Base64
import groovy.json.JsonOutput

// Function to perform JWS signing
def jwsSign(options) {
    def header = options.header
    def payload = options.payload
    def secret = options.secret

    // Convert the header and payload to JSON strings
    def encodedHeader = JsonOutput.toJson(header)
    def encodedPayload = JsonOutput.toJson(payload)

    // Base64url encode the header and payload
    //def headerBase64 = base64urlEncode(encodedHeader)
    //def payloadBase64 = base64urlEncode(encodedPayload)

     def headerBase64 = encodedHeader
     def payloadBase64 = encodedPayload
    
    // Create the signing input
    def signingInput = &quot;${headerBase64}.${payloadBase64}&quot;

    // Compute the HMAC-SHA256 signature
    def signature = hmacSha256(signingInput, secret)
    def base64urlSignature = base64urlEncode(signature.bytes)

    // Construct the JWS token
    return &quot;${signingInput}.${base64urlSignature}&quot;
}

// Utility function to encode a string as base64url
def base64urlEncode(str) {
    Base64.encodeBase64URLSafeString(str.getBytes(&quot;UTF-8&quot;))
}

// HMAC-SHA256 signature function
def hmacSha256(data, key) {
    Mac mac = Mac.getInstance(&quot;HmacSHA256&quot;)
    SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(&quot;UTF-8&quot;), &quot;HmacSHA256&quot;)
    mac.init(secretKeySpec)
    byte[] doFinal = mac.doFinal(data.getBytes(&quot;UTF-8&quot;))
    return doFinal.encodeBase64().toString()
}

// Define your header and payload
def header = [&quot;typ&quot;: &apos;JWS&apos;, &quot;alg&quot;: &apos;HS256&apos;]
def payload = [&quot;principalCode&quot;:&quot;&quot;, &quot;fromDateTime&quot;:&quot;2024-03-12T16:00:00Z&quot;, &quot;toDateTime&quot;:&quot;2024-03-12T16:00:00Z&quot;]

// Retrieve the secret key from JMeter variables
def secretKey = vars.get(&quot;secret_key&quot;)

// Options for JWS signing
def options = [
  header: header,
  payload: payload,
  secret: secretKey
]

// Generate the JWS token
//def jwsToken = jwsSign(options)

// Set the JWS token as a JMeter variable
//vars.put(&quot;query&quot;, JsonOutput.toJson(jwsToken))

vars.put(&quot;queryvariable&quot;, &quot;\&quot;eyJ0eXAiOiJKV1MiLCJhbGciOiJIUzI1NiJ9.eyJwcmluY2lwYWxDb2RlIjoiIiwiZnJvbURhdGVUaW1lIjoiMjAyNC0wMy0xMlQxNjowMDowMFoiLCJ0b0RhdGVUaW1lIjoiMjAyNC0wMy0xMlQxNjowMDowMFoifQ.-wo2d28YFjn40jD5ML8l66bofkVXyDIB8w2JeXp0-o0\&quot;&quot;)
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assertioncall_account_statement_Request">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">// Import necessary JMeter classes
import org.apache.jmeter.assertions.AssertionResult
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.protocol.http.control.Header
import org.apache.jmeter.protocol.http.control.HeaderManager

// Retrieve the authToken variable from JMeter variables
String authToken = vars.get(&quot;authToken&quot;)

// Log indicating the start of the position
log.info(&quot;======== call-account-statement start ========&quot;)

// Get the previous SampleResult
SampleResult sampleResult = ctx.getPreviousResult()CR

// Check if SampleResult is not null
if (sampleResult != null) {
    // Assert response code
    String responseCode = sampleResult.getResponseCode()
    log.info(&quot;Response Code: &quot; + responseCode)
    AssertionResult responseCodeAssertion = new AssertionResult(&quot;TC_CAS_01 - Response Code Check&quot;)
    responseCodeAssertion.setFailure(!&quot;200&quot;.equals(responseCode))
    responseCodeAssertion.setFailureMessage(&quot;Expected response code 200 but got &quot; + responseCode)
    if (!responseCodeAssertion.isFailure()) {
        log.info(&quot;Response code assertion: Passed&quot;)
    }
    sampleResult.addAssertionResult(responseCodeAssertion)

    // Assert response message
    String responseMessage = sampleResult.getResponseMessage()
    log.info(&quot;Response Message: &quot; + responseMessage)
    AssertionResult responseMessageAssertion = new AssertionResult(&quot;TC_CAS_02 - Response Message Check&quot;)
    responseMessageAssertion.setFailure(!&quot;OK&quot;.equalsIgnoreCase(responseMessage))
    responseMessageAssertion.setFailureMessage(&quot;Expected response message &apos;OK&apos; but got &quot; + responseMessage)
    if (!responseMessageAssertion.isFailure()) {
        log.info(&quot;Response message assertion: Passed&quot;)
    }
    sampleResult.addAssertionResult(responseMessageAssertion)

    // Example: Extracting and checking all keys and values from the response body
    def responseBody = sampleResult.getResponseDataAsString() // Assuming response body is JSON
    log.info(&quot;Response Body: &quot; + responseBody)

    // Parse the responseBody
    def parsedBody = new groovy.json.JsonSlurper().parseText(responseBody)

    // Initialize assertion results for memberCode and memberName
    AssertionResult memberCodeAssertion = new AssertionResult(&quot;TC_CAS_06 - Member Code Check&quot;)
    AssertionResult memberNameAssertion = new AssertionResult(&quot;TC_CAS_07 - Member Name Check&quot;)

    // Check if &apos;message&apos; is present and valid
    if (parsedBody.containsKey(&quot;message&quot;)) {
        if (parsedBody.message instanceof List &amp;&amp; !parsedBody.message.isEmpty()) {
            def message = parsedBody.message[0]
            if (message.memberCode == null) {
                memberCodeAssertion.setFailure(true)
                memberCodeAssertion.setFailureMessage(&quot;&apos;memberCode&apos; is null.&quot;)
                log.warn(&quot;&apos;memberCode&apos; assertion: Failed for null&quot;)
            } else {
                memberCodeAssertion.setFailure(false)
                log.info(&quot;&apos;memberCode&apos; assertion: Passed&quot;)
            }
            if (message.memberName == null) {
                memberNameAssertion.setFailure(true)
                memberNameAssertion.setFailureMessage(&quot;&apos;memberName&apos; is null.&quot;)
                log.warn(&quot;&apos;memberName&apos; assertion: Failed for null&quot;)
            } else {
                memberNameAssertion.setFailure(false)
                log.info(&quot;&apos;memberName&apos; assertion: Passed&quot;)
            }

            // Example of handling nested fields
            if (message.subKey1 != null) {
                log.info(&quot;Value of &apos;subKey1&apos; is: ${message.subKey1.getClass().getSimpleName()}&quot;)
            }

            // Initialize assertion results for clientCode and clientName
            AssertionResult clientCodeAssertion = new AssertionResult(&quot;TC_CAS_08 - Client Code Check&quot;)
            AssertionResult clientNameAssertion = new AssertionResult(&quot;TC_CAS_09 - Client Name Check&quot;)

            // Ensure clientCode is not empty, but pass if null
            if (message.clientCode == null) {
                clientCodeAssertion.setFailure(false)
                log.info(&quot;&apos;clientCode&apos; is null.&quot;)
            } else if (message.clientCode.isEmpty()) {
                clientCodeAssertion.setFailure(true)
                clientCodeAssertion.setFailureMessage(&quot;&apos;clientCode&apos; is empty.&quot;)
                log.warn(&quot;&apos;clientCode&apos; assertion: Failed for empty value&quot;)
            } else {
                clientCodeAssertion.setFailure(false)
                log.info(&quot;&apos;clientCode&apos; assertion: Passed&quot;)
            }

            // Ensure clientName is not empty, but pass if null
            if (message.clientName == null) {
                clientNameAssertion.setFailure(false)
                log.info(&quot;&apos;clientName&apos; is null.&quot;)
            } else if (message.clientName.isEmpty()) {
                clientNameAssertion.setFailure(true)
                clientNameAssertion.setFailureMessage(&quot;&apos;clientName&apos; is empty.&quot;)
                log.warn(&quot;&apos;clientName&apos; assertion: Failed for empty value&quot;)
            } else {
                clientNameAssertion.setFailure(false)
                log.info(&quot;&apos;clientName&apos; assertion: Passed&quot;)
            }

            // Add clientCode and clientName assertions to sample result
            sampleResult.addAssertionResult(clientCodeAssertion)
            sampleResult.addAssertionResult(clientNameAssertion)
        } else {
            log.warn(&quot;Response &apos;message&apos; value is an empty list.&quot;)
            AssertionResult emptyMessageAssertion = new AssertionResult(&quot;TC_PR_10 - Empty Message List Check&quot;)
            emptyMessageAssertion.setFailure(true)
            emptyMessageAssertion.setFailureMessage(&quot;Response &apos;message&apos; value is an empty list.&quot;)
            sampleResult.addAssertionResult(emptyMessageAssertion)
        }
    } else {
        log.warn(&quot;&apos;message&apos; key not found in response.&quot;)
        AssertionResult messageKeyAssertion = new AssertionResult(&quot;TC_CAS_11 - &apos;message&apos; Key Check&quot;)
        messageKeyAssertion.setFailure(true)
        messageKeyAssertion.setFailureMessage(&quot;&apos;message&apos; key not found in response.&quot;)
        sampleResult.addAssertionResult(messageKeyAssertion)
    }

    // Add memberCode and memberName assertions to sample result
    sampleResult.addAssertionResult(memberCodeAssertion)
    sampleResult.addAssertionResult(memberNameAssertion)

    // Assert response signature
    String responseSignature = parsedBody.signature
    log.info(&quot;Signature: &quot; + responseSignature)
    AssertionResult signatureAssertion = new AssertionResult(&quot;TC_CAS_12 - Signature Check&quot;)
    if (responseSignature == null) {
        signatureAssertion.setFailure(true)
        signatureAssertion.setFailureMessage(&quot;Signature is null.&quot;)
        log.warn(&quot;Signature assertion: Failed for null&quot;)
    } else if (!(responseSignature instanceof String)) {
        signatureAssertion.setFailure(true)
        signatureAssertion.setFailureMessage(&quot;Signature is not a String.&quot;)
        log.warn(&quot;Signature assertion: Failed for non-String&quot;)
    } else {
        signatureAssertion.setFailure(false)
        log.info(&quot;Signature assertion: Passed&quot;)
    }
    sampleResult.addAssertionResult(signatureAssertion)

    // Get the current sampler and its HeaderManager
    org.apache.jmeter.samplers.Sampler sampler = ctx.getCurrentSampler()
    HeaderManager headerManager = sampler.getHeaderManager()

    // Check if HeaderManager is not null
    if (headerManager != null) {
        boolean authHeaderFound = false

        // Loop through headers to find &quot;Authorization&quot;
        for (int i = 0; i &lt; headerManager.size(); i++) {
            Header header = headerManager.get(i)

            // Check if the header name is &quot;Authorization&quot;
            if (&quot;Authorization&quot;.equalsIgnoreCase(header.getName())) {
                log.info(&quot;Authorization header value before hitting the Position: &quot; + header.getValue())
                authHeaderFound = true
                break // Exit loop once &quot;Authorization&quot; header is found
            }
        }

        // Log a warning if &quot;Authorization&quot; header is not found
        if (!authHeaderFound) {
            log.warn(&quot;Authorization header not found in the Position headers.&quot;)

            // Create an AssertionResult object and set the failure
            AssertionResult assertionResult = new AssertionResult(&quot;TC_CAS_03 - Authorization Header Check&quot;)
            assertionResult.setFailure(true)
            assertionResult.setFailureMessage(&quot;Authorization header not found in the Position headers.&quot;)

            // Add the assertion result to the sample result
            sampleResult.addAssertionResult(assertionResult)
        } else {
            // Set success message for authorization header check
            AssertionResult assertionResult = new AssertionResult(&quot;TC_CAS_03 - Authorization Header Check&quot;)
            assertionResult.setFailure(false)
            assertionResult.setFailureMessage(&quot;Authorization header found in the Position headers&quot;)
            sampleResult.addAssertionResult(assertionResult)
            log.info(&quot;Authorization header assertion: Passed&quot;)
        }
    } else {
        // Log a warning if no HeaderManager is found
        log.warn(&quot;No HeaderManager found.&quot;)

        // Create an AssertionResult object and set the failure
        AssertionResult assertionResult = new AssertionResult(&quot;TC_CAS_04 - HeaderManager Check&quot;)
        assertionResult.setFailure(true)
        assertionResult.setFailureMessage(&quot;No HeaderManager found.&quot;)

        // Add the assertion result to the sample result
        sampleResult.addAssertionResult(assertionResult)
    }
} else {
    // Log a warning if no SampleResult is found
    log.warn(&quot;No previous SampleResult found.&quot;)

    // Create an AssertionResult object and set the failure
    AssertionResult assertionResult = new AssertionResult(&quot;TC_CAS_05 - SampleResult Check&quot;)
    assertionResult.setFailure(true)
    assertionResult.setFailureMessage(&quot;No previous SampleResult found.&quot;)

    // Add the assertion result to the sample result
    if (sampleResult != null) {
        sampleResult.addAssertionResult(assertionResult)
    }
}

log.info(&quot;======== call-account-statement end ========&quot;)
// Example of logging custom message
String logMessage = &quot;call-account-statement Logged successfully&quot;
log.info(logMessage)
</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="closing-price">
          <stringProp name="HTTPSampler.domain">post-trade-api.uat.asianext.aws</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/clearing/v1/closing-price</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${queryvariable}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${__P(authToken)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pssing_JWS_token_to_queryvariable" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import javax.crypto.Mac
import javax.crypto.spec.SecretKeySpec
import org.apache.commons.codec.binary.Base64
import groovy.json.JsonOutput

// Function to perform JWS signing
def jwsSign(options) {
    def header = options.header
    def payload = options.payload
    def secret = options.secret

    // Convert the header and payload to JSON strings
    def encodedHeader = JsonOutput.toJson(header)
    def encodedPayload = JsonOutput.toJson(payload)

    // Base64url encode the header and payload
    //def headerBase64 = base64urlEncode(encodedHeader)
    //def payloadBase64 = base64urlEncode(encodedPayload)

     def headerBase64 = encodedHeader
     def payloadBase64 = encodedPayload
    
    // Create the signing input
    def signingInput = &quot;${headerBase64}.${payloadBase64}&quot;

    // Compute the HMAC-SHA256 signature
    def signature = hmacSha256(signingInput, secret)
    def base64urlSignature = base64urlEncode(signature.bytes)

    // Construct the JWS token
    return &quot;${signingInput}.${base64urlSignature}&quot;
}

// Utility function to encode a string as base64url
def base64urlEncode(str) {
    Base64.encodeBase64URLSafeString(str.getBytes(&quot;UTF-8&quot;))
}

// HMAC-SHA256 signature function
def hmacSha256(data, key) {
    Mac mac = Mac.getInstance(&quot;HmacSHA256&quot;)
    SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(&quot;UTF-8&quot;), &quot;HmacSHA256&quot;)
    mac.init(secretKeySpec)
    byte[] doFinal = mac.doFinal(data.getBytes(&quot;UTF-8&quot;))
    return doFinal.encodeBase64().toString()
}

// Define your header and payload
def header = [&quot;typ&quot;: &apos;JWS&apos;, &quot;alg&quot;: &apos;HS256&apos;]
def payload = [&quot;dateTime&quot;:&quot;2024-03-01T01:00:00Z&quot;]

// Retrieve the secret key from JMeter variables
def secretKey = vars.get(&quot;secret_key&quot;)

// Options for JWS signing
def options = [
  header: header,
  payload: payload,
  secret: secretKey
]

// Generate the JWS token
//def jwsToken = jwsSign(options)

// Set the JWS token as a JMeter variable
//vars.put(&quot;query&quot;, JsonOutput.toJson(jwsToken))

vars.put(&quot;queryvariable&quot;, &quot;\&quot;eyJ0eXAiOiJKV1MiLCJhbGciOiJIUzI1NiJ9.eyJkYXRlVGltZSI6IjIwMjQtMDMtMDFUMDE6MDA6MDBaIn0.kSbef43aZVJyl6QqqOiQLNwN2-TcJugVoQnD4p2EgKk\&quot;&quot;)
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assertion_closing_price_Request">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">// Import necessary JMeter classes
import org.apache.jmeter.assertions.AssertionResult
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.protocol.http.control.Header
import org.apache.jmeter.protocol.http.control.HeaderManager

// Log indicating the start of processing
log.info(&quot;======== closing-price start ========&quot;)

// Get the previous SampleResult
SampleResult sampleResult = ctx.getPreviousResult()

// Check if SampleResult is not null
if (sampleResult != null) {
    // Assert response code
    String responseCode = sampleResult.getResponseCode()
    log.info(&quot;Response Code: &quot; + responseCode)
    AssertionResult responseCodeAssertion = new AssertionResult(&quot;TC_CPR_01 - Response Code Check&quot;)
    responseCodeAssertion.setFailure(!&quot;200&quot;.equals(responseCode))
    responseCodeAssertion.setFailureMessage(&quot;Expected response code 200 but got &quot; + responseCode)
    if (!responseCodeAssertion.isFailure()) {
        log.info(&quot;Response code assertion: Passed&quot;)
    }
    sampleResult.addAssertionResult(responseCodeAssertion)

    // Assert response message
    String responseMessage = sampleResult.getResponseMessage()
    log.info(&quot;Response Message: &quot; + responseMessage)
    AssertionResult responseMessageAssertion = new AssertionResult(&quot;TC_CPR_02 - Response Message Check&quot;)
    responseMessageAssertion.setFailure(!&quot;OK&quot;.equalsIgnoreCase(responseMessage))
    responseMessageAssertion.setFailureMessage(&quot;Expected response message &apos;OK&apos; but got &quot; + responseMessage)
    if (!responseMessageAssertion.isFailure()) {
        log.info(&quot;Response message assertion: Passed&quot;)
    }
    sampleResult.addAssertionResult(responseMessageAssertion)

    // Example: Extracting and checking all keys and values from the response body
    def responseBody = sampleResult.getResponseDataAsString() // Assuming response body is JSON
    log.info(&quot;Response Body: &quot; + responseBody)

    // Parse the responseBody
    def parsedBody = new groovy.json.JsonSlurper().parseText(responseBody)

    // Initialize assertion results for each key
    AssertionResult assertionResult = null

    // Check if &apos;message&apos; array is present and not empty
    if (parsedBody.message instanceof List &amp;&amp; !parsedBody.message.isEmpty()) {
        parsedBody.message.eachWithIndex { message, index -&gt;
            // Log test case name dynamically
            String testCaseName = &quot;TC_PR_${index + 1} - Contract Details Check&quot;
            log.info(&quot;=== Test Case: $testCaseName ===&quot;)

            // Assert &apos;contract&apos; details
            def contract = message.contract
            assertionResult = assertField(contract.asset, &quot;asset&quot;, &quot;String&quot;)
            sampleResult.addAssertionResult(assertionResult)
            assertionResult = assertField(contract.exchangeSymbol, &quot;exchangeSymbol&quot;, &quot;String&quot;)
            sampleResult.addAssertionResult(assertionResult)
            assertionResult = assertField(contract.currencyCode, &quot;currencyCode&quot;, &quot;String&quot;)
            sampleResult.addAssertionResult(assertionResult)
            assertionResult = assertField(contract.settlementType, &quot;settlementType&quot;, &quot;String&quot;)
            sampleResult.addAssertionResult(assertionResult)
            assertionResult = assertField(contract.maturityDate, &quot;maturityDate&quot;, &quot;Date&quot;)
            sampleResult.addAssertionResult(assertionResult)
            assertionResult = assertField(contract.displayName, &quot;displayName&quot;, &quot;String&quot;)
            sampleResult.addAssertionResult(assertionResult)
            assertionResult = assertField(contract.contractSize, &quot;contractSize&quot;, &quot;Number&quot;)
            sampleResult.addAssertionResult(assertionResult)
            assertionResult = assertField(contract.callPut, &quot;callPut&quot;, &quot;String&quot;)
            sampleResult.addAssertionResult(assertionResult)
            assertionResult = assertField(contract.strike, &quot;strike&quot;, &quot;Number&quot;)
            sampleResult.addAssertionResult(assertionResult)

            // Assert other fields in &apos;message&apos;
            assertionResult = assertField(message.price, &quot;price&quot;, &quot;Number&quot;)
            sampleResult.addAssertionResult(assertionResult)
            assertionResult = assertField(message.fundingBP, &quot;fundingBP&quot;, &quot;Number&quot;)
            sampleResult.addAssertionResult(assertionResult)
            assertionResult = assertField(message.openInterest, &quot;openInterest&quot;, &quot;Number&quot;)
            sampleResult.addAssertionResult(assertionResult)
            assertionResult = assertField(message.closingPriceDateTime, &quot;closingPriceDateTime&quot;, &quot;Date&quot;)
            sampleResult.addAssertionResult(assertionResult)
        }
    } else {
        assertionResult = new AssertionResult(&quot;TC_CR_08 - &apos;message&apos; Array Check&quot;)
        assertionResult.setFailure(true)
        assertionResult.setFailureMessage(&quot;&apos;message&apos; is either not a list or empty.&quot;)
        log.warn(&quot;&apos;message&apos; assertion: Failed due to invalid &apos;message&apos; structure.&quot;)
        sampleResult.addAssertionResult(assertionResult)
    }

    // Assert &apos;note&apos; field
    assertionResult = assertField(parsedBody.note, &quot;note&quot;, &quot;String&quot;)
    sampleResult.addAssertionResult(assertionResult)

    // Assert &apos;signature&apos; field
    assertionResult = assertField(parsedBody.signature, &quot;signature&quot;, &quot;String&quot;)
    sampleResult.addAssertionResult(assertionResult)
} else {
    // Log a warning if no SampleResult is found
    log.warn(&quot;No previous SampleResult found.&quot;)

    // Create an AssertionResult object and set the failure
    AssertionResult assertionResult = new AssertionResult(&quot;TC_CPR_03 - SampleResult Check&quot;)
    assertionResult.setFailure(true)
    assertionResult.setFailureMessage(&quot;No previous SampleResult found.&quot;)
    sampleResult.addAssertionResult(assertionResult)
}

log.info(&quot;======== closing-price ========&quot;)

// Function to assert a field based on its value and type
AssertionResult assertField(value, fieldName, expectedType) {
    AssertionResult assertionResult = new AssertionResult(&quot;TC_CPR_04 - $fieldName Check&quot;)

    if (value == null) {
        assertionResult.setFailure(true)
        assertionResult.setFailureMessage(&quot;$fieldName is null.&quot;)
        log.warn(&quot;$fieldName assertion: Failed for null&quot;)
    } else {
        // Determine the type of the value and assert accordingly
        def valueType = value.getClass().getSimpleName()
        
        switch (expectedType) {
            case &quot;String&quot;:
                if (!(value instanceof String)) {
                    assertionResult.setFailure(true)
                    assertionResult.setFailureMessage(&quot;$fieldName is not a String.&quot;)
                    log.warn(&quot;$fieldName assertion: Failed for non-String&quot;)
                } else {
                    assertionResult.setFailure(false)
                    log.info(&quot;$fieldName assertion: Passed (Type: $valueType)&quot;)
                }
                break
            case &quot;Number&quot;:
                if (!(value instanceof Number)) {
                    assertionResult.setFailure(true)
                    assertionResult.setFailureMessage(&quot;$fieldName is not a Number.&quot;)
                    log.warn(&quot;$fieldName assertion: Failed for non-Number&quot;)
                } else {
                    assertionResult.setFailure(false)
                    log.info(&quot;$fieldName assertion: Passed (Type: $valueType)&quot;)
                }
                break
            case &quot;Date&quot;:
                // Perform date validation logic here (if needed)
                assertionResult.setFailure(false)
                log.info(&quot;$fieldName assertion: Passed (Type: $valueType)&quot;)
                break
            default:
                assertionResult.setFailure(true)
                assertionResult.setFailureMessage(&quot;Unsupported expected type: $expectedType&quot;)
                log.warn(&quot;$fieldName assertion: Unsupported expected type: $expectedType&quot;)
        }
    }

    return assertionResult
}
</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="contract">
          <stringProp name="HTTPSampler.domain">post-trade-api.uat.asianext.aws</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/clearing/v1/contract</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${__P(authToken)}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Assertion_contract_Request">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">// Import necessary JMeter classes
import org.apache.jmeter.assertions.AssertionResult
import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.protocol.http.control.Header
import org.apache.jmeter.protocol.http.control.HeaderManager

// Log indicating the start of processing
log.info(&quot;======== contract start ========&quot;)

// Get the previous SampleResult
SampleResult sampleResult = ctx.getPreviousResult()

// Check if SampleResult is not null
if (sampleResult != null) {
    // Assert response code
    String responseCode = sampleResult.getResponseCode()
    log.info(&quot;Response Code: &quot; + responseCode)
    AssertionResult responseCodeAssertion = new AssertionResult(&quot;TC_CPR_01 - Response Code Check&quot;)
    responseCodeAssertion.setFailure(!&quot;200&quot;.equals(responseCode))
    responseCodeAssertion.setFailureMessage(&quot;Expected response code 200 but got &quot; + responseCode)
    if (!responseCodeAssertion.isFailure()) {
        log.info(&quot;Response code assertion: Passed&quot;)
    }
    sampleResult.addAssertionResult(responseCodeAssertion)

    // Assert response message
    String responseMessage = sampleResult.getResponseMessage()
    log.info(&quot;Response Message: &quot; + responseMessage)
    AssertionResult responseMessageAssertion = new AssertionResult(&quot;TC_CPR_02 - Response Message Check&quot;)
    responseMessageAssertion.setFailure(!&quot;OK&quot;.equalsIgnoreCase(responseMessage))
    responseMessageAssertion.setFailureMessage(&quot;Expected response message &apos;OK&apos; but got &quot; + responseMessage)
    if (!responseMessageAssertion.isFailure()) {
        log.info(&quot;Response message assertion: Passed&quot;)
    }
    sampleResult.addAssertionResult(responseMessageAssertion)

    // Example: Extracting and checking all keys and values from the response body
    def responseBody = sampleResult.getResponseDataAsString() // Assuming response body is JSON
    log.info(&quot;Response Body: &quot; + responseBody)

    // Parse the responseBody
    def parsedBody = new groovy.json.JsonSlurper().parseText(responseBody)

    // Initialize assertion results for each key
    AssertionResult assertionResult = null

    // Check if &apos;message&apos; array is present and not empty
    if (parsedBody.message instanceof List &amp;&amp; !parsedBody.message.isEmpty()) {
        parsedBody.message.eachWithIndex { message, index -&gt;
            // Log test case name dynamically
            String testCaseName = &quot;TC_PR_${index + 1} - Contract Details Check&quot;
            log.info(&quot;=== Test Case: $testCaseName ===&quot;)

            // Assert &apos;contract&apos; details
            def contract = message.contract
            assertionResult = assertField(contract.asset, &quot;asset&quot;, &quot;String&quot;)
            sampleResult.addAssertionResult(assertionResult)
            assertionResult = assertField(contract.exchangeSymbol, &quot;exchangeSymbol&quot;, &quot;String&quot;)
            sampleResult.addAssertionResult(assertionResult)
            assertionResult = assertField(contract.currencyCode, &quot;currencyCode&quot;, &quot;String&quot;)
            sampleResult.addAssertionResult(assertionResult)
            assertionResult = assertField(contract.settlementType, &quot;settlementType&quot;, &quot;String&quot;)
            sampleResult.addAssertionResult(assertionResult)
            assertionResult = assertField(contract.maturityDate, &quot;maturityDate&quot;, &quot;Date&quot;)
            sampleResult.addAssertionResult(assertionResult)
            assertionResult = assertField(contract.displayName, &quot;displayName&quot;, &quot;String&quot;)
            sampleResult.addAssertionResult(assertionResult)
            assertionResult = assertField(contract.contractSize, &quot;contractSize&quot;, &quot;Number&quot;)
            sampleResult.addAssertionResult(assertionResult)
            assertionResult = assertField(contract.callPut, &quot;callPut&quot;, &quot;String&quot;)
            sampleResult.addAssertionResult(assertionResult)
            assertionResult = assertField(contract.strike, &quot;strike&quot;, &quot;Number&quot;)
            sampleResult.addAssertionResult(assertionResult)

            // Assert other fields in &apos;message&apos;
            assertionResult = assertField(message.price, &quot;price&quot;, &quot;Number&quot;)
            sampleResult.addAssertionResult(assertionResult)
            assertionResult = assertField(message.fundingBP, &quot;fundingBP&quot;, &quot;Number&quot;)
            sampleResult.addAssertionResult(assertionResult)
            assertionResult = assertField(message.openInterest, &quot;openInterest&quot;, &quot;Number&quot;)
            sampleResult.addAssertionResult(assertionResult)
            assertionResult = assertField(message.closingPriceDateTime, &quot;closingPriceDateTime&quot;, &quot;Date&quot;)
            sampleResult.addAssertionResult(assertionResult)
        }
    } else {
        assertionResult = new AssertionResult(&quot;TC_CR_08 - &apos;message&apos; Array Check&quot;)
        assertionResult.setFailure(true)
        assertionResult.setFailureMessage(&quot;&apos;message&apos; is either not a list or empty.&quot;)
        log.warn(&quot;&apos;message&apos; assertion: Failed due to invalid &apos;message&apos; structure.&quot;)
        sampleResult.addAssertionResult(assertionResult)
    }

    // Assert &apos;note&apos; field
    assertionResult = assertField(parsedBody.note, &quot;note&quot;, &quot;String&quot;)
    sampleResult.addAssertionResult(assertionResult)

    // Assert &apos;signature&apos; field
    assertionResult = assertField(parsedBody.signature, &quot;signature&quot;, &quot;String&quot;)
    sampleResult.addAssertionResult(assertionResult)
} else {
    // Log a warning if no SampleResult is found
    log.warn(&quot;No previous SampleResult found.&quot;)

    // Create an AssertionResult object and set the failure
    AssertionResult assertionResult = new AssertionResult(&quot;TC_CPR_03 - SampleResult Check&quot;)
    assertionResult.setFailure(true)
    assertionResult.setFailureMessage(&quot;No previous SampleResult found.&quot;)
    sampleResult.addAssertionResult(assertionResult)
}

log.info(&quot;======== closing-price ========&quot;)

// Function to assert a field based on its value and type
AssertionResult assertField(value, fieldName, expectedType) {
    AssertionResult assertionResult = new AssertionResult(&quot;TC_CPR_04 - $fieldName Check&quot;)

    if (value == null) {
        assertionResult.setFailure(true)
        assertionResult.setFailureMessage(&quot;$fieldName is null.&quot;)
        log.warn(&quot;$fieldName assertion: Failed for null&quot;)
    } else {
        // Determine the type of the value and assert accordingly
        def valueType = value.getClass().getSimpleName()
        
        switch (expectedType) {
            case &quot;String&quot;:
                if (!(value instanceof String)) {
                    assertionResult.setFailure(true)
                    assertionResult.setFailureMessage(&quot;$fieldName is not a String.&quot;)
                    log.warn(&quot;$fieldName assertion: Failed for non-String&quot;)
                } else {
                    assertionResult.setFailure(false)
                    log.info(&quot;$fieldName assertion: Passed (Type: $valueType)&quot;)
                }
                break
            case &quot;Number&quot;:
                if (!(value instanceof Number)) {
                    assertionResult.setFailure(true)
                    assertionResult.setFailureMessage(&quot;$fieldName is not a Number.&quot;)
                    log.warn(&quot;$fieldName assertion: Failed for non-Number&quot;)
                } else {
                    assertionResult.setFailure(false)
                    log.info(&quot;$fieldName assertion: Passed (Type: $valueType)&quot;)
                }
                break
            case &quot;Date&quot;:
                // Perform date validation logic here (if needed)
                assertionResult.setFailure(false)
                log.info(&quot;$fieldName assertion: Passed (Type: $valueType)&quot;)
                break
            default:
                assertionResult.setFailure(true)
                assertionResult.setFailureMessage(&quot;Unsupported expected type: $expectedType&quot;)
                log.warn(&quot;$fieldName assertion: Unsupported expected type: $expectedType&quot;)
        }
    }

    return assertionResult
}
</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="health" enabled="false">
          <stringProp name="HTTPSampler.domain">post-trade-api.uat.asianext.aws</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/clearing/v1/health/status</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${__P(authToken)}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Check authToken is passed or not" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">// Retrieve the authToken variable from JMeter variables
String authToken = vars.get(&quot;authToken&quot;);

// Log indicating the start of the position
log.info(&quot;========health start=========: &quot;);

// Import necessary JMeter classes
import org.apache.jmeter.protocol.http.control.Header;
import org.apache.jmeter.protocol.http.control.HeaderManager;
import org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase;
import org.apache.jmeter.assertions.AssertionResult;
import org.apache.jmeter.samplers.SampleResult;

// Get the current sampler and its HeaderManager
HTTPSamplerBase sampler = (HTTPSamplerBase) ctx.getCurrentSampler();
HeaderManager headerManager = sampler.getHeaderManager();

// Check if HeaderManager is not null
if (headerManager != null) {
    boolean authHeaderFound = false;
    
    // Loop through headers to find &quot;Authorization&quot;
    for (int i = 0; i &lt; headerManager.size(); i++) {
        Header header = headerManager.get(i);
        
        // Check if the header name is &quot;Authorization&quot;
        if (header.getName().equals(&quot;Authorization&quot;)) {
            log.info(&quot;Authorization header value before hitting the health: &quot; + header.getValue());
            authHeaderFound = true;
            break; // Exit loop once &quot;Authorization&quot; header is found
        }
    }
    
    // Log a warning if &quot;Authorization&quot; header is not found
    if (!authHeaderFound) {
        log.warn(&quot;Authorization header not found in the health headers.&quot;);
        
        // Create an AssertionResult object and set the failure
        AssertionResult assertionResult = new AssertionResult(&quot;Authorization Header Check&quot;);
        assertionResult.setFailure(true);
        assertionResult.setFailureMessage(&quot;Authorization header not found in the health headers.&quot;);
        
        // Add the assertion result to the sample result
        SampleResult sampleResult = ctx.getPreviousResult();
        sampleResult.addAssertionResult(assertionResult);
    }
} else {
    // Log a warning if no HeaderManager is found
    log.warn(&quot;No HeaderManager found.&quot;);
    
    // Create an AssertionResult object and set the failure
    AssertionResult assertionResult = new AssertionResult(&quot;HeaderManager Check&quot;);
    assertionResult.setFailure(true);
    assertionResult.setFailureMessage(&quot;No HeaderManager found.&quot;);
    
    // Add the assertion result to the sample result
    SampleResult sampleResult = ctx.getPreviousResult();
    sampleResult.addAssertionResult(assertionResult);
}
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Checking Response Code -200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract_signature" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">var_signature</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">.signature</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">value_not_found</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Checking_wether_the_Signature_is_generated_if_generated_print_the_Signature" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">// Import required classes
import org.apache.jmeter.assertions.AssertionResult;

// Retrieve the extracted var_signature variable from JMeter context
String var_signature = vars.get(&quot;var_signature&quot;);

// Check if the signature is null or empty
if (var_signature == null || var_signature.isEmpty()) {
    AssertionResult result = new AssertionResult(&quot;Signature Assertion&quot;);
    result.setFailureMessage(&quot;signature is missing or empty&quot;);
    result.setFailure(true);
    AssertionResult.add(result);
} else {
    // Log the generated signature for verification
    log.info(&quot;signature Generated in health: &quot; + var_signature);
}

log.info(&quot;========health end=========: &quot;);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="indicative-margin-required" enabled="false">
          <stringProp name="HTTPSampler.domain">post-trade-api.uat.asianext.aws</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/clearing/v1/indicative-margin-required</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${queryvariable}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${__P(authToken)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="query" enabled="false">
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.referenceNames">query</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">stringify(jwsToken)</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pssing_JWS_token_to_queryvariable" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import javax.crypto.Mac
import javax.crypto.spec.SecretKeySpec
import org.apache.commons.codec.binary.Base64
import groovy.json.JsonOutput

// Function to perform JWS signing
def jwsSign(options) {
    def header = options.header
    def payload = options.payload
    def secret = options.secret

    // Convert the header and payload to JSON strings
    def encodedHeader = JsonOutput.toJson(header)
    def encodedPayload = JsonOutput.toJson(payload)

    // Base64url encode the header and payload
    //def headerBase64 = base64urlEncode(encodedHeader)
    //def payloadBase64 = base64urlEncode(encodedPayload)

     def headerBase64 = encodedHeader
     def payloadBase64 = encodedPayload
    
    // Create the signing input
    def signingInput = &quot;${headerBase64}.${payloadBase64}&quot;

    // Compute the HMAC-SHA256 signature
    def signature = hmacSha256(signingInput, secret)
    def base64urlSignature = base64urlEncode(signature.bytes)

    // Construct the JWS token
    return &quot;${signingInput}.${base64urlSignature}&quot;
}

// Utility function to encode a string as base64url
def base64urlEncode(str) {
    Base64.encodeBase64URLSafeString(str.getBytes(&quot;UTF-8&quot;))
}

// HMAC-SHA256 signature function
def hmacSha256(data, key) {
    Mac mac = Mac.getInstance(&quot;HmacSHA256&quot;)
    SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(&quot;UTF-8&quot;), &quot;HmacSHA256&quot;)
    mac.init(secretKeySpec)
    byte[] doFinal = mac.doFinal(data.getBytes(&quot;UTF-8&quot;))
    return doFinal.encodeBase64().toString()
}

// Define your header and payload
def header = [&quot;typ&quot;: &apos;JWS&apos;, &quot;alg&quot;: &apos;HS256&apos;]
def payload = [&quot;principalCode&quot;:&quot;&quot;]

// Retrieve the secret key from JMeter variables
def secretKey = vars.get(&quot;secret_key&quot;)

// Options for JWS signing
def options = [
  header: header,
  payload: payload,
  secret: secretKey
]

// Generate the JWS token
//def jwsToken = jwsSign(options)

// Set the JWS token as a JMeter variable
//vars.put(&quot;query&quot;, JsonOutput.toJson(jwsToken))

vars.put(&quot;queryvariable&quot;, &quot;\&quot;eyJ0eXAiOiJKV1MiLCJhbGciOiJIUzI1NiJ9.eyJkYXRlVGltZSI6IjIwMjQtMDMtMDFUMDE6MDA6MDBaIn0.kSbef43aZVJyl6QqqOiQLNwN2-TcJugVoQnD4p2EgKk\&quot;&quot;)
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Check authToken is passed or not" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">// Retrieve the authToken variable from JMeter variables
String authToken = vars.get(&quot;authToken&quot;);

// Log indicating the start of the position
log.info(&quot;========indicative-margin-required start=========: &quot;);

// Import necessary JMeter classes
import org.apache.jmeter.protocol.http.control.Header;
import org.apache.jmeter.protocol.http.control.HeaderManager;
import org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase;
import org.apache.jmeter.assertions.AssertionResult;
import org.apache.jmeter.samplers.SampleResult;

// Get the current sampler and its HeaderManager
HTTPSamplerBase sampler = (HTTPSamplerBase) ctx.getCurrentSampler();
HeaderManager headerManager = sampler.getHeaderManager();

// Check if HeaderManager is not null
if (headerManager != null) {
    boolean authHeaderFound = false;
    
    // Loop through headers to find &quot;Authorization&quot;
    for (int i = 0; i &lt; headerManager.size(); i++) {
        Header header = headerManager.get(i);
        
        // Check if the header name is &quot;Authorization&quot;
        if (header.getName().equals(&quot;Authorization&quot;)) {
            log.info(&quot;Authorization header value before hitting the indicative-margin-required: &quot; + header.getValue());
            authHeaderFound = true;
            break; // Exit loop once &quot;Authorization&quot; header is found
        }
    }
    
    // Log a warning if &quot;Authorization&quot; header is not found
    if (!authHeaderFound) {
        log.warn(&quot;Authorization header not found in the indicative-margin-required headers.&quot;);
        
        // Create an AssertionResult object and set the failure
        AssertionResult assertionResult = new AssertionResult(&quot;Authorization Header Check&quot;);
        assertionResult.setFailure(true);
        assertionResult.setFailureMessage(&quot;Authorization header not found in the indicative-margin-required headers.&quot;);
        
        // Add the assertion result to the sample result
        SampleResult sampleResult = ctx.getPreviousResult();
        sampleResult.addAssertionResult(assertionResult);
    }
} else {
    // Log a warning if no HeaderManager is found
    log.warn(&quot;No HeaderManager found.&quot;);
    
    // Create an AssertionResult object and set the failure
    AssertionResult assertionResult = new AssertionResult(&quot;HeaderManager Check&quot;);
    assertionResult.setFailure(true);
    assertionResult.setFailureMessage(&quot;No HeaderManager found.&quot;);
    
    // Add the assertion result to the sample result
    SampleResult sampleResult = ctx.getPreviousResult();
    sampleResult.addAssertionResult(assertionResult);
}
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Checking Response Code -200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract_signature" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">var_signature</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">.signature</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">value_not_found</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Checking_wether_the_Signature_is_generated_if_generated_print_the_Signature" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">// Import required classes
import org.apache.jmeter.assertions.AssertionResult;

// Retrieve the extracted var_signature variable from JMeter context
String var_signature = vars.get(&quot;var_signature&quot;);

// Check if the signature is null or empty
if (var_signature == null || var_signature.isEmpty()) {
    AssertionResult result = new AssertionResult(&quot;Signature Assertion&quot;);
    result.setFailureMessage(&quot;signature is missing or empty&quot;);
    result.setFailure(true);
    AssertionResult.add(result);
} else {
    // Log the generated signature for verification
    log.info(&quot;signature Generated in health: &quot; + var_signature);
}
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Check_queryvariable_not_null" enabled="true">
            <stringProp name="BeanShellAssertion.query">String queryVariable = vars.get(&quot;queryvariable&quot;);
//log.info(&quot;query value :&quot;+queryVariable)
if (queryVariable != null &amp;&amp; !queryVariable.isEmpty()) {
    log.info(&quot;query value: &quot; + queryVariable);
} else {
    log.warn(&quot;queryVariable is either null or empty.&quot;);
}

log.info(&quot;========indicative-margin-required end=========: &quot;);</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="notification" enabled="false">
          <stringProp name="HTTPSampler.domain">post-trade-api.uat.asianext.aws</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/clearing/v1/notification</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${queryvariable}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${__P(authToken)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="query" enabled="false">
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.referenceNames">query</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">stringify(jwsToken)</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pssing_JWS_token_to_queryvariable" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import javax.crypto.Mac
import javax.crypto.spec.SecretKeySpec
import org.apache.commons.codec.binary.Base64
import groovy.json.JsonOutput

// Function to perform JWS signing
def jwsSign(options) {
    def header = options.header
    def payload = options.payload
    def secret = options.secret

    // Convert the header and payload to JSON strings
    def encodedHeader = JsonOutput.toJson(header)
    def encodedPayload = JsonOutput.toJson(payload)

    // Base64url encode the header and payload
    //def headerBase64 = base64urlEncode(encodedHeader)
    //def payloadBase64 = base64urlEncode(encodedPayload)

     def headerBase64 = encodedHeader
     def payloadBase64 = encodedPayload
    
    // Create the signing input
    def signingInput = &quot;${headerBase64}.${payloadBase64}&quot;

    // Compute the HMAC-SHA256 signature
    def signature = hmacSha256(signingInput, secret)
    def base64urlSignature = base64urlEncode(signature.bytes)

    // Construct the JWS token
    return &quot;${signingInput}.${base64urlSignature}&quot;
}

// Utility function to encode a string as base64url
def base64urlEncode(str) {
    Base64.encodeBase64URLSafeString(str.getBytes(&quot;UTF-8&quot;))
}

// HMAC-SHA256 signature function
def hmacSha256(data, key) {
    Mac mac = Mac.getInstance(&quot;HmacSHA256&quot;)
    SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(&quot;UTF-8&quot;), &quot;HmacSHA256&quot;)
    mac.init(secretKeySpec)
    byte[] doFinal = mac.doFinal(data.getBytes(&quot;UTF-8&quot;))
    return doFinal.encodeBase64().toString()
}

// Define your header and payload
def header = [&quot;typ&quot;: &apos;JWS&apos;, &quot;alg&quot;: &apos;HS256&apos;]
def payload = [&quot;notificationType&quot;: &quot;All&quot;]

// Retrieve the secret key from JMeter variables
def secretKey = vars.get(&quot;secret_key&quot;)

// Options for JWS signing
def options = [
  header: header,
  payload: payload,
  secret: secretKey
]

// Generate the JWS token
//def jwsToken = jwsSign(options)

// Set the JWS token as a JMeter variable
//vars.put(&quot;query&quot;, JsonOutput.toJson(jwsToken))

vars.put(&quot;queryvariable&quot;, &quot;\&quot;eyJ0eXAiOiJKV1MiLCJhbGciOiJIUzI1NiJ9.eyJkYXRlVGltZSI6IjIwMjQtMDMtMDFUMDE6MDA6MDBaIn0.kSbef43aZVJyl6QqqOiQLNwN2-TcJugVoQnD4p2EgKk\&quot;&quot;)
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Check authToken is passed or not" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">// Retrieve the authToken variable from JMeter variables
String authToken = vars.get(&quot;authToken&quot;);

// Log indicating the start of the position
log.info(&quot;========notification start=========: &quot;);

// Import necessary JMeter classes
import org.apache.jmeter.protocol.http.control.Header;
import org.apache.jmeter.protocol.http.control.HeaderManager;
import org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase;
import org.apache.jmeter.assertions.AssertionResult;
import org.apache.jmeter.samplers.SampleResult;

// Get the current sampler and its HeaderManager
HTTPSamplerBase sampler = (HTTPSamplerBase) ctx.getCurrentSampler();
HeaderManager headerManager = sampler.getHeaderManager();

// Check if HeaderManager is not null
if (headerManager != null) {
    boolean authHeaderFound = false;
    
    // Loop through headers to find &quot;Authorization&quot;
    for (int i = 0; i &lt; headerManager.size(); i++) {
        Header header = headerManager.get(i);
        
        // Check if the header name is &quot;Authorization&quot;
        if (header.getName().equals(&quot;Authorization&quot;)) {
            log.info(&quot;Authorization header value before hitting the notification: &quot; + header.getValue());
            authHeaderFound = true;
            break; // Exit loop once &quot;Authorization&quot; header is found
        }
    }
    
    // Log a warning if &quot;Authorization&quot; header is not found
    if (!authHeaderFound) {
        log.warn(&quot;Authorization header not found in the notification headers.&quot;);
        
        // Create an AssertionResult object and set the failure
        AssertionResult assertionResult = new AssertionResult(&quot;Authorization Header Check&quot;);
        assertionResult.setFailure(true);
        assertionResult.setFailureMessage(&quot;Authorization header not found in the notification headers.&quot;);
        
        // Add the assertion result to the sample result
        SampleResult sampleResult = ctx.getPreviousResult();
        sampleResult.addAssertionResult(assertionResult);
    }
} else {
    // Log a warning if no HeaderManager is found
    log.warn(&quot;No HeaderManager found.&quot;);
    
    // Create an AssertionResult object and set the failure
    AssertionResult assertionResult = new AssertionResult(&quot;HeaderManager Check&quot;);
    assertionResult.setFailure(true);
    assertionResult.setFailureMessage(&quot;No HeaderManager found.&quot;);
    
    // Add the assertion result to the sample result
    SampleResult sampleResult = ctx.getPreviousResult();
    sampleResult.addAssertionResult(assertionResult);
}
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Checking Response Code -200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract_signature" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">var_signature</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">.signature</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">value_not_found</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Checking_wether_the_Signature_is_generated_if_generated_print_the_Signature" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">// Import required classes
import org.apache.jmeter.assertions.AssertionResult;

// Retrieve the extracted var_signature variable from JMeter context
String var_signature = vars.get(&quot;var_signature&quot;);

// Check if the signature is null or empty
if (var_signature == null || var_signature.isEmpty()) {
    AssertionResult result = new AssertionResult(&quot;Signature Assertion&quot;);
    result.setFailureMessage(&quot;signature is missing or empty&quot;);
    result.setFailure(true);
    AssertionResult.add(result);
} else {
    // Log the generated signature for verification
    log.info(&quot;signature Generated in notification: &quot; + var_signature);
}

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Check_queryvariable_not_null" enabled="true">
            <stringProp name="BeanShellAssertion.query">String queryVariable = vars.get(&quot;queryvariable&quot;);
//log.info(&quot;query value :&quot;+queryVariable)
if (queryVariable != null &amp;&amp; !queryVariable.isEmpty()) {
    log.info(&quot;query value: &quot; + queryVariable);
} else {
    log.warn(&quot;queryVariable is either null or empty.&quot;);
}

log.info(&quot;========notification end=========: &quot;);</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="position-statement" enabled="false">
          <stringProp name="HTTPSampler.domain">post-trade-api.uat.asianext.aws</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/clearing/v1/position-statement</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${queryvariable}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${__P(authToken)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="query" enabled="false">
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.referenceNames">query</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">stringify(jwsToken)</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pssing_JWS_token_to_queryvariable" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import javax.crypto.Mac
import javax.crypto.spec.SecretKeySpec
import org.apache.commons.codec.binary.Base64
import groovy.json.JsonOutput

// Function to perform JWS signing
def jwsSign(options) {
    def header = options.header
    def payload = options.payload
    def secret = options.secret

    // Convert the header and payload to JSON strings
    def encodedHeader = JsonOutput.toJson(header)
    def encodedPayload = JsonOutput.toJson(payload)

    // Base64url encode the header and payload
    //def headerBase64 = base64urlEncode(encodedHeader)
    //def payloadBase64 = base64urlEncode(encodedPayload)

     def headerBase64 = encodedHeader
     def payloadBase64 = encodedPayload
    
    // Create the signing input
    def signingInput = &quot;${headerBase64}.${payloadBase64}&quot;

    // Compute the HMAC-SHA256 signature
    def signature = hmacSha256(signingInput, secret)
    def base64urlSignature = base64urlEncode(signature.bytes)

    // Construct the JWS token
    return &quot;${signingInput}.${base64urlSignature}&quot;
}

// Utility function to encode a string as base64url
def base64urlEncode(str) {
    Base64.encodeBase64URLSafeString(str.getBytes(&quot;UTF-8&quot;))
}

// HMAC-SHA256 signature function
def hmacSha256(data, key) {
    Mac mac = Mac.getInstance(&quot;HmacSHA256&quot;)
    SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(&quot;UTF-8&quot;), &quot;HmacSHA256&quot;)
    mac.init(secretKeySpec)
    byte[] doFinal = mac.doFinal(data.getBytes(&quot;UTF-8&quot;))
    return doFinal.encodeBase64().toString()
}

// Define your header and payload
def header = [&quot;typ&quot;: &apos;JWS&apos;, &quot;alg&quot;: &apos;HS256&apos;]
def payload = [&quot;principalCode&quot;:&quot;&quot;,&quot;dateTime&quot;:&quot;2024-03-12T16:00:00Z&quot;]

// Retrieve the secret key from JMeter variables
def secretKey = vars.get(&quot;secret_key&quot;)

// Options for JWS signing
def options = [
  header: header,
  payload: payload,
  secret: secretKey
]

// Generate the JWS token
//def jwsToken = jwsSign(options)

// Set the JWS token as a JMeter variable
//vars.put(&quot;query&quot;, JsonOutput.toJson(jwsToken))

vars.put(&quot;queryvariable&quot;, &quot;\&quot;eyJ0eXAiOiJKV1MiLCJhbGciOiJIUzI1NiJ9.eyJwcmluY2lwYWxDb2RlIjoiIiwiZGF0ZVRpbWUiOiIyMDI0LTAzLTEyVDE2OjAwOjAwWiJ9.sqVOnw-JRbvNUhMDX-2SVBMKJjjP7uw5UBl_BH_3-v0\&quot;&quot;)
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Check authToken is passed or not" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">// Retrieve the authToken variable from JMeter variables
String authToken = vars.get(&quot;authToken&quot;);

// Log indicating the start of the position
log.info(&quot;========position-statement start=========: &quot;);

// Import necessary JMeter classes
import org.apache.jmeter.protocol.http.control.Header;
import org.apache.jmeter.protocol.http.control.HeaderManager;
import org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase;
import org.apache.jmeter.assertions.AssertionResult;
import org.apache.jmeter.samplers.SampleResult;

// Get the current sampler and its HeaderManager
HTTPSamplerBase sampler = (HTTPSamplerBase) ctx.getCurrentSampler();
HeaderManager headerManager = sampler.getHeaderManager();

// Check if HeaderManager is not null
if (headerManager != null) {
    boolean authHeaderFound = false;
    
    // Loop through headers to find &quot;Authorization&quot;
    for (int i = 0; i &lt; headerManager.size(); i++) {
        Header header = headerManager.get(i);
        
        // Check if the header name is &quot;Authorization&quot;
        if (header.getName().equals(&quot;Authorization&quot;)) {
            log.info(&quot;Authorization header value before hitting the position-statement: &quot; + header.getValue());
            authHeaderFound = true;
            break; // Exit loop once &quot;Authorization&quot; header is found
        }
    }
    
    // Log a warning if &quot;Authorization&quot; header is not found
    if (!authHeaderFound) {
        log.warn(&quot;Authorization header not found in the notification headers.&quot;);
        
        // Create an AssertionResult object and set the failure
        AssertionResult assertionResult = new AssertionResult(&quot;Authorization Header Check&quot;);
        assertionResult.setFailure(true);
        assertionResult.setFailureMessage(&quot;Authorization header not found in the position-statement headers.&quot;);
        
        // Add the assertion result to the sample result
        SampleResult sampleResult = ctx.getPreviousResult();
        sampleResult.addAssertionResult(assertionResult);
    }
} else {
    // Log a warning if no HeaderManager is found
    log.warn(&quot;No HeaderManager found.&quot;);
    
    // Create an AssertionResult object and set the failure
    AssertionResult assertionResult = new AssertionResult(&quot;HeaderManager Check&quot;);
    assertionResult.setFailure(true);
    assertionResult.setFailureMessage(&quot;No HeaderManager found.&quot;);
    
    // Add the assertion result to the sample result
    SampleResult sampleResult = ctx.getPreviousResult();
    sampleResult.addAssertionResult(assertionResult);
}
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Checking Response Code -200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract_signature" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">var_signature</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">.signature</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">value_not_found</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Checking_wether_the_Signature_is_generated_if_generated_print_the_Signature" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">// Import required classes
import org.apache.jmeter.assertions.AssertionResult;

// Retrieve the extracted var_signature variable from JMeter context
String var_signature = vars.get(&quot;var_signature&quot;);

// Check if the signature is null or empty
if (var_signature == null || var_signature.isEmpty()) {
    AssertionResult result = new AssertionResult(&quot;Signature Assertion&quot;);
    result.setFailureMessage(&quot;signature is missing or empty&quot;);
    result.setFailure(true);
    AssertionResult.add(result);
} else {
    // Log the generated signature for verification
    log.info(&quot;signature Generated in position-statement: &quot; + var_signature);
}

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Check_queryvariable_not_null" enabled="true">
            <stringProp name="BeanShellAssertion.query">String queryVariable = vars.get(&quot;queryvariable&quot;);
//log.info(&quot;query value :&quot;+queryVariable)
if (queryVariable != null &amp;&amp; !queryVariable.isEmpty()) {
    log.info(&quot;query value: &quot; + queryVariable);
} else {
    log.warn(&quot;queryVariable is either null or empty.&quot;);
}

log.info(&quot;========position-statement end=========: &quot;);</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="cleared-trade-statement" enabled="false">
          <stringProp name="HTTPSampler.domain">post-trade-api.uat.asianext.aws</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/clearing/v1/cleared-trade-statement</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${queryvariable}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${__P(authToken)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="query" enabled="false">
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.referenceNames">query</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">stringify(jwsToken)</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pssing_JWS_token_to_queryvariable" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import javax.crypto.Mac
import javax.crypto.spec.SecretKeySpec
import org.apache.commons.codec.binary.Base64
import groovy.json.JsonOutput

// Function to perform JWS signing
def jwsSign(options) {
    def header = options.header
    def payload = options.payload
    def secret = options.secret

    // Convert the header and payload to JSON strings
    def encodedHeader = JsonOutput.toJson(header)
    def encodedPayload = JsonOutput.toJson(payload)

    // Base64url encode the header and payload
    //def headerBase64 = base64urlEncode(encodedHeader)
    //def payloadBase64 = base64urlEncode(encodedPayload)

     def headerBase64 = encodedHeader
     def payloadBase64 = encodedPayload
    
    // Create the signing input
    def signingInput = &quot;${headerBase64}.${payloadBase64}&quot;

    // Compute the HMAC-SHA256 signature
    def signature = hmacSha256(signingInput, secret)
    def base64urlSignature = base64urlEncode(signature.bytes)

    // Construct the JWS token
    return &quot;${signingInput}.${base64urlSignature}&quot;
}

// Utility function to encode a string as base64url
def base64urlEncode(str) {
    Base64.encodeBase64URLSafeString(str.getBytes(&quot;UTF-8&quot;))
}

// HMAC-SHA256 signature function
def hmacSha256(data, key) {
    Mac mac = Mac.getInstance(&quot;HmacSHA256&quot;)
    SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(&quot;UTF-8&quot;), &quot;HmacSHA256&quot;)
    mac.init(secretKeySpec)
    byte[] doFinal = mac.doFinal(data.getBytes(&quot;UTF-8&quot;))
    return doFinal.encodeBase64().toString()
}

// Define your header and payload
def header = [&quot;typ&quot;: &apos;JWS&apos;, &quot;alg&quot;: &apos;HS256&apos;]
def payload = [&quot;principalCode&quot;:&quot;&quot;, &quot;fromDateTime&quot;:&quot;2024-03-12T16:00:00Z&quot;, &quot;toDateTime&quot;:&quot;2024-03-12T16:00:00Z&quot;]

// Retrieve the secret key from JMeter variables
def secretKey = vars.get(&quot;secret_key&quot;)

// Options for JWS signing
def options = [
  header: header,
  payload: payload,
  secret: secretKey
]

// Generate the JWS token
//def jwsToken = jwsSign(options)

// Set the JWS token as a JMeter variable
//vars.put(&quot;query&quot;, JsonOutput.toJson(jwsToken))

vars.put(&quot;queryvariable&quot;, &quot;\&quot;eyJ0eXAiOiJKV1MiLCJhbGciOiJIUzI1NiJ9.eyJwcmluY2lwYWxDb2RlIjoiIiwiZnJvbURhdGVUaW1lIjoiMjAyNC0wMy0xMlQxNjowMDowMFoiLCJ0b0RhdGVUaW1lIjoiMjAyNC0wMy0xMlQxNjowMDowMFoifQ.-wo2d28YFjn40jD5ML8l66bofkVXyDIB8w2JeXp0-o0\&quot;&quot;)
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Check authToken is passed or not" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">// Retrieve the authToken variable from JMeter variables
String authToken = vars.get(&quot;authToken&quot;);

// Log indicating the start of the position
log.info(&quot;========cleared-trade-statement start=========: &quot;);

// Import necessary JMeter classes
import org.apache.jmeter.protocol.http.control.Header;
import org.apache.jmeter.protocol.http.control.HeaderManager;
import org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase;
import org.apache.jmeter.assertions.AssertionResult;
import org.apache.jmeter.samplers.SampleResult;

// Get the current sampler and its HeaderManager
HTTPSamplerBase sampler = (HTTPSamplerBase) ctx.getCurrentSampler();
HeaderManager headerManager = sampler.getHeaderManager();

// Check if HeaderManager is not null
if (headerManager != null) {
    boolean authHeaderFound = false;
    
    // Loop through headers to find &quot;Authorization&quot;
    for (int i = 0; i &lt; headerManager.size(); i++) {
        Header header = headerManager.get(i);
        
        // Check if the header name is &quot;Authorization&quot;
        if (header.getName().equals(&quot;Authorization&quot;)) {
            log.info(&quot;Authorization header value before hitting the cleared-trade-statement: &quot; + header.getValue());
            authHeaderFound = true;
            break; // Exit loop once &quot;Authorization&quot; header is found
        }
    }
    
    // Log a warning if &quot;Authorization&quot; header is not found
    if (!authHeaderFound) {
        log.warn(&quot;Authorization header not found in the cleared-trade-statement headers.&quot;);
        
        // Create an AssertionResult object and set the failure
        AssertionResult assertionResult = new AssertionResult(&quot;Authorization Header Check&quot;);
        assertionResult.setFailure(true);
        assertionResult.setFailureMessage(&quot;Authorization header not found in the cleared-trade-statement headers.&quot;);
        
        // Add the assertion result to the sample result
        SampleResult sampleResult = ctx.getPreviousResult();
        sampleResult.addAssertionResult(assertionResult);
    }
} else {
    // Log a warning if no HeaderManager is found
    log.warn(&quot;No HeaderManager found.&quot;);
    
    // Create an AssertionResult object and set the failure
    AssertionResult assertionResult = new AssertionResult(&quot;HeaderManager Check&quot;);
    assertionResult.setFailure(true);
    assertionResult.setFailureMessage(&quot;No HeaderManager found.&quot;);
    
    // Add the assertion result to the sample result
    SampleResult sampleResult = ctx.getPreviousResult();
    sampleResult.addAssertionResult(assertionResult);
}
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Checking Response Code -200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract_signature" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">var_signature</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">.signature</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">value_not_found</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Checking_wether_the_Signature_is_generated_if_generated_print_the_Signature" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">// Import required classes
import org.apache.jmeter.assertions.AssertionResult;

// Retrieve the extracted var_signature variable from JMeter context
String var_signature = vars.get(&quot;var_signature&quot;);

// Check if the signature is null or empty
if (var_signature == null || var_signature.isEmpty()) {
    AssertionResult result = new AssertionResult(&quot;Signature Assertion&quot;);
    result.setFailureMessage(&quot;signature is missing or empty&quot;);
    result.setFailure(true);
    AssertionResult.add(result);
} else {
    // Log the generated signature for verification
    log.info(&quot;signature Generated in cleared-trade-statement: &quot; + var_signature);
}

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Check_queryvariable_not_null" enabled="true">
            <stringProp name="BeanShellAssertion.query">String queryVariable = vars.get(&quot;queryvariable&quot;);
//log.info(&quot;query value :&quot;+queryVariable)
if (queryVariable != null &amp;&amp; !queryVariable.isEmpty()) {
    log.info(&quot;query value: &quot; + queryVariable);
} else {
    log.warn(&quot;queryVariable is either null or empty.&quot;);
}

log.info(&quot;========cleared-trade-statement end=========: &quot;);</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="uncleared-trade-statement" enabled="false">
          <stringProp name="HTTPSampler.domain">post-trade-api.uat.asianext.aws</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/clearing/v1/uncleared-trade-statement</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${queryvariable}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${__P(authToken)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="query" enabled="false">
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.referenceNames">query</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">stringify(jwsToken)</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pssing_JWS_token_to_queryvariable" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import javax.crypto.Mac
import javax.crypto.spec.SecretKeySpec
import org.apache.commons.codec.binary.Base64
import groovy.json.JsonOutput

// Function to perform JWS signing
def jwsSign(options) {
    def header = options.header
    def payload = options.payload
    def secret = options.secret

    // Convert the header and payload to JSON strings
    def encodedHeader = JsonOutput.toJson(header)
    def encodedPayload = JsonOutput.toJson(payload)

    // Base64url encode the header and payload
    //def headerBase64 = base64urlEncode(encodedHeader)
    //def payloadBase64 = base64urlEncode(encodedPayload)

     def headerBase64 = encodedHeader
     def payloadBase64 = encodedPayload
    
    // Create the signing input
    def signingInput = &quot;${headerBase64}.${payloadBase64}&quot;

    // Compute the HMAC-SHA256 signature
    def signature = hmacSha256(signingInput, secret)
    def base64urlSignature = base64urlEncode(signature.bytes)

    // Construct the JWS token
    return &quot;${signingInput}.${base64urlSignature}&quot;
}

// Utility function to encode a string as base64url
def base64urlEncode(str) {
    Base64.encodeBase64URLSafeString(str.getBytes(&quot;UTF-8&quot;))
}

// HMAC-SHA256 signature function
def hmacSha256(data, key) {
    Mac mac = Mac.getInstance(&quot;HmacSHA256&quot;)
    SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(&quot;UTF-8&quot;), &quot;HmacSHA256&quot;)
    mac.init(secretKeySpec)
    byte[] doFinal = mac.doFinal(data.getBytes(&quot;UTF-8&quot;))
    return doFinal.encodeBase64().toString()
}

// Define your header and payload
def header = [&quot;typ&quot;: &apos;JWS&apos;, &quot;alg&quot;: &apos;HS256&apos;]
def payload = [&quot;principalCode&quot;:&quot;&quot;]

// Retrieve the secret key from JMeter variables
def secretKey = vars.get(&quot;secret_key&quot;)

// Options for JWS signing
def options = [
  header: header,
  payload: payload,
  secret: secretKey
]

// Generate the JWS token
//def jwsToken = jwsSign(options)

// Set the JWS token as a JMeter variable
//vars.put(&quot;query&quot;, JsonOutput.toJson(jwsToken))

vars.put(&quot;queryvariable&quot;, &quot;\&quot;eyJ0eXAiOiJKV1MiLCJhbGciOiJIUzI1NiJ9.eyJwcmluY2lwYWxDb2RlIjoiIn0.i3CwlyT5nv4o_QQsdb6usqmR5cUJnccVcv5NMLCpJ6A\&quot;&quot;)
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Check authToken is passed or not" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">// Retrieve the authToken variable from JMeter variables
String authToken = vars.get(&quot;authToken&quot;);

// Log indicating the start of the position
log.info(&quot;========uncleared-trade-statement start=========: &quot;);

// Import necessary JMeter classes
import org.apache.jmeter.protocol.http.control.Header;
import org.apache.jmeter.protocol.http.control.HeaderManager;
import org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase;
import org.apache.jmeter.assertions.AssertionResult;
import org.apache.jmeter.samplers.SampleResult;

// Get the current sampler and its HeaderManager
HTTPSamplerBase sampler = (HTTPSamplerBase) ctx.getCurrentSampler();
HeaderManager headerManager = sampler.getHeaderManager();

// Check if HeaderManager is not null
if (headerManager != null) {
    boolean authHeaderFound = false;
    
    // Loop through headers to find &quot;Authorization&quot;
    for (int i = 0; i &lt; headerManager.size(); i++) {
        Header header = headerManager.get(i);
        
        // Check if the header name is &quot;Authorization&quot;
        if (header.getName().equals(&quot;Authorization&quot;)) {
            log.info(&quot;Authorization header value before hitting the uncleared-trade-statement: &quot; + header.getValue());
            authHeaderFound = true;
            break; // Exit loop once &quot;Authorization&quot; header is found
        }
    }
    
    // Log a warning if &quot;Authorization&quot; header is not found
    if (!authHeaderFound) {
        log.warn(&quot;Authorization header not found in the uncleared-trade-statement headers.&quot;);
        
        // Create an AssertionResult object and set the failure
        AssertionResult assertionResult = new AssertionResult(&quot;Authorization Header Check&quot;);
        assertionResult.setFailure(true);
        assertionResult.setFailureMessage(&quot;Authorization header not found in the uncleared-trade-statement headers.&quot;);
        
        // Add the assertion result to the sample result
        SampleResult sampleResult = ctx.getPreviousResult();
        sampleResult.addAssertionResult(assertionResult);
    }
} else {
    // Log a warning if no HeaderManager is found
    log.warn(&quot;No HeaderManager found.&quot;);
    
    // Create an AssertionResult object and set the failure
    AssertionResult assertionResult = new AssertionResult(&quot;HeaderManager Check&quot;);
    assertionResult.setFailure(true);
    assertionResult.setFailureMessage(&quot;No HeaderManager found.&quot;);
    
    // Add the assertion result to the sample result
    SampleResult sampleResult = ctx.getPreviousResult();
    sampleResult.addAssertionResult(assertionResult);
}
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Checking Response Code -200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract_signature" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">var_signature</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">.signature</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">value_not_found</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Checking_wether_the_Signature_is_generated_if_generated_print_the_Signature" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">// Import required classes
import org.apache.jmeter.assertions.AssertionResult;

// Retrieve the extracted var_signature variable from JMeter context
String var_signature = vars.get(&quot;var_signature&quot;);

// Check if the signature is null or empty
if (var_signature == null || var_signature.isEmpty()) {
    AssertionResult result = new AssertionResult(&quot;Signature Assertion&quot;);
    result.setFailureMessage(&quot;signature is missing or empty&quot;);
    result.setFailure(true);
    AssertionResult.add(result);
} else {
    // Log the generated signature for verification
    log.info(&quot;signature Generated in uncleared-trade-statement: &quot; + var_signature);
}

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Check_queryvariable_not_null" enabled="true">
            <stringProp name="BeanShellAssertion.query">String queryVariable = vars.get(&quot;queryvariable&quot;);
//log.info(&quot;query value :&quot;+queryVariable)
if (queryVariable != null &amp;&amp; !queryVariable.isEmpty()) {
    log.info(&quot;query value: &quot; + queryVariable);
} else {
    log.warn(&quot;queryVariable is either null or empty.&quot;);
}

log.info(&quot;========uncleared-trade-statement end=========: &quot;);</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="indicative-cash-balance" enabled="false">
          <stringProp name="HTTPSampler.domain">post-trade-api.uat.asianext.aws</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/clearing/v1/indicative-cash-balance</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${queryvariable}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${__P(authToken)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pssing_JWS_token_to_queryvariable" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import javax.crypto.Mac
import javax.crypto.spec.SecretKeySpec
import org.apache.commons.codec.binary.Base64
import groovy.json.JsonOutput

// Function to perform JWS signing
def jwsSign(options) {
    def header = options.header
    def payload = options.payload
    def secret = options.secret

    // Convert the header and payload to JSON strings
    def encodedHeader = JsonOutput.toJson(header)
    def encodedPayload = JsonOutput.toJson(payload)

    // Base64url encode the header and payload
    //def headerBase64 = base64urlEncode(encodedHeader)
    //def payloadBase64 = base64urlEncode(encodedPayload)

     def headerBase64 = encodedHeader
     def payloadBase64 = encodedPayload
    
    // Create the signing input
    def signingInput = &quot;${headerBase64}.${payloadBase64}&quot;

    // Compute the HMAC-SHA256 signature
    def signature = hmacSha256(signingInput, secret)
    def base64urlSignature = base64urlEncode(signature.bytes)

    // Construct the JWS token
    return &quot;${signingInput}.${base64urlSignature}&quot;
}

// Utility function to encode a string as base64url
def base64urlEncode(str) {
    Base64.encodeBase64URLSafeString(str.getBytes(&quot;UTF-8&quot;))
}

// HMAC-SHA256 signature function
def hmacSha256(data, key) {
    Mac mac = Mac.getInstance(&quot;HmacSHA256&quot;)
    SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(&quot;UTF-8&quot;), &quot;HmacSHA256&quot;)
    mac.init(secretKeySpec)
    byte[] doFinal = mac.doFinal(data.getBytes(&quot;UTF-8&quot;))
    return doFinal.encodeBase64().toString()
}

// Define your header and payload
def header = [&quot;typ&quot;: &apos;JWS&apos;, &quot;alg&quot;: &apos;HS256&apos;]
def payload = [&quot;principalCode&quot;:&quot;&quot;]

// Retrieve the secret key from JMeter variables
def secretKey = vars.get(&quot;secret_key&quot;)

// Options for JWS signing
def options = [
  header: header,
  payload: payload,
  secret: secretKey
]

// Generate the JWS token
//def jwsToken = jwsSign(options)

// Set the JWS token as a JMeter variable
//vars.put(&quot;query&quot;, JsonOutput.toJson(jwsToken))

vars.put(&quot;queryvariable&quot;, &quot;\&quot;eyJ0eXAiOiJKV1MiLCJhbGciOiJIUzI1NiJ9.eyJwcmluY2lwYWxDb2RlIjoiIn0.i3CwlyT5nv4o_QQsdb6usqmR5cUJnccVcv5NMLCpJ6A\&quot;&quot;)
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Check authToken is passed or not" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">// Retrieve the authToken variable from JMeter variables
String authToken = vars.get(&quot;authToken&quot;);

// Log indicating the start of the position
log.info(&quot;========indicative-cash-balance start=========: &quot;);

// Import necessary JMeter classes
import org.apache.jmeter.protocol.http.control.Header;
import org.apache.jmeter.protocol.http.control.HeaderManager;
import org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase;
import org.apache.jmeter.assertions.AssertionResult;
import org.apache.jmeter.samplers.SampleResult;

// Get the current sampler and its HeaderManager
HTTPSamplerBase sampler = (HTTPSamplerBase) ctx.getCurrentSampler();
HeaderManager headerManager = sampler.getHeaderManager();

// Check if HeaderManager is not null
if (headerManager != null) {
    boolean authHeaderFound = false;
    
    // Loop through headers to find &quot;Authorization&quot;
    for (int i = 0; i &lt; headerManager.size(); i++) {
        Header header = headerManager.get(i);
        
        // Check if the header name is &quot;Authorization&quot;
        if (header.getName().equals(&quot;Authorization&quot;)) {
            log.info(&quot;Authorization header value before hitting the indicative-cash-balance: &quot; + header.getValue());
            authHeaderFound = true;
            break; // Exit loop once &quot;Authorization&quot; header is found
        }
    }
    
    // Log a warning if &quot;Authorization&quot; header is not found
    if (!authHeaderFound) {
        log.warn(&quot;Authorization header not found in the indicative-cash-balance headers.&quot;);
        
        // Create an AssertionResult object and set the failure
        AssertionResult assertionResult = new AssertionResult(&quot;Authorization Header Check&quot;);
        assertionResult.setFailure(true);
        assertionResult.setFailureMessage(&quot;Authorization header not found in the indicative-cash-balance headers.&quot;);
        
        // Add the assertion result to the sample result
        SampleResult sampleResult = ctx.getPreviousResult();
        sampleResult.addAssertionResult(assertionResult);
    }
} else {
    // Log a warning if no HeaderManager is found
    log.warn(&quot;No HeaderManager found.&quot;);
    
    // Create an AssertionResult object and set the failure
    AssertionResult assertionResult = new AssertionResult(&quot;HeaderManager Check&quot;);
    assertionResult.setFailure(true);
    assertionResult.setFailureMessage(&quot;No HeaderManager found.&quot;);
    
    // Add the assertion result to the sample result
    SampleResult sampleResult = ctx.getPreviousResult();
    sampleResult.addAssertionResult(assertionResult);
}
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Checking Response Code -200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract_signature" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">var_signature</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">.signature</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">value_not_found</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Checking_wether_the_Signature_is_generated_if_generated_print_the_Signature" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">// Import required classes
import org.apache.jmeter.assertions.AssertionResult;

// Retrieve the extracted var_signature variable from JMeter context
String var_signature = vars.get(&quot;var_signature&quot;);

// Check if the signature is null or empty
if (var_signature == null || var_signature.isEmpty()) {
    AssertionResult result = new AssertionResult(&quot;Signature Assertion&quot;);
    result.setFailureMessage(&quot;signature is missing or empty&quot;);
    result.setFailure(true);
    AssertionResult.add(result);
} else {
    // Log the generated signature for verification
    log.info(&quot;signature Generated in indicative-cash-balance: &quot; + var_signature);
}

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Check_queryvariable_not_null" enabled="true">
            <stringProp name="BeanShellAssertion.query">String queryVariable = vars.get(&quot;queryvariable&quot;);
//log.info(&quot;query value :&quot;+queryVariable)
if (queryVariable != null &amp;&amp; !queryVariable.isEmpty()) {
    log.info(&quot;query value: &quot; + queryVariable);
} else {
    log.warn(&quot;queryVariable is either null or empty.&quot;);
}

log.info(&quot;========indicative-cash-balance end=========: &quot;);</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Refresh" enabled="false">
          <stringProp name="HTTPSampler.domain">post-trade-api.uat.asianext.aws</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/auth/v1/account/refresh</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${refreshToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="auth_token" enabled="true">
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.referenceNames">auth_token</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">value.accessToken</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="refreshToken" enabled="true">
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.referenceNames">refreshToken</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">value.refreshToken</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">// Define the CSV file path
String csvFilePath = &quot;C:\\Users\\Splpt 708\\Desktop\\LapTopBackUP02-07-2024\\AsiaNext-APi\\jmter\\AssertionresultsFromScripts.csv&quot;;

// Retrieve response data and other necessary variables
String responseData = prev.getResponseDataAsString();
String samplerName = prev.getSampleLabel();
String timestamp = String.valueOf(prev.getTimeStamp());
String success = prev.isSuccessful() ? &quot;Success&quot; : &quot;Failure&quot;;

// Construct CSV format data
String csvData = &quot;\&quot;&quot; + samplerName + &quot;\&quot;,\&quot;&quot; + timestamp + &quot;\&quot;,\&quot;&quot; + success + &quot;\&quot;,\&quot;&quot; + responseData.replace(&quot;\&quot;&quot;, &quot;\&quot;\&quot;&quot;) + &quot;\&quot;\n&quot;;

// Write to CSV file
try {
    FileOutputStream fos = new FileOutputStream(csvFilePath); // No append mode, overwrites existing file
    OutputStreamWriter osw = new OutputStreamWriter(fos, &quot;UTF-8&quot;);
    BufferedWriter bw = new BufferedWriter(osw);
    bw.write(csvData);
    bw.close();
    log.info(&quot;Result overwritten to CSV file successfully.&quot;);
} catch (IOException e) {
    log.error(&quot;Failed to write to CSV file: &quot; + e.toString());
}
</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="tearDown Thread Group" enabled="false">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </PostThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DB Update" enabled="false">
          <stringProp name="HTTPSampler.domain">post-trade-api.uat.asianext.aws</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/clearing/v1/database/dbsync</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${__P(authToken)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
        <stringProp name="DurationAssertion.duration">1500</stringProp>
      </DurationAssertion>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">C:\Users\Splpt 708\Desktop\LapTopBackUP02-07-2024\AsiaNext-APi\Results\resultsposttrade.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">C:\Users\Splpt 708\Desktop\LapTopBackUP02-07-2024\AsiaNext-APi\jmter\PosTradAPIAssertionResult.csv</stringProp>
      </ResultCollector>
      <hashTree/>
      <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Position" enabled="false">
        <stringProp name="cacheKey">true</stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="script">import java.io.FileWriter;
import java.io.PrintWriter;
import java.io.IOException;

// Define a function to log details
def logRequestDetails(logFilePath, samplerName, responseCode, responseMessage, requestHeaders, responseTime, requestUrl, responseBody, authToken, queryValue) {
    try {
        // Create a FileWriter object with append mode
        FileWriter fileWriter = new FileWriter(logFilePath, true);
        // Create a PrintWriter object to wrap the FileWriter
        PrintWriter printWriter = new PrintWriter(fileWriter);

        // Log your messages
        printWriter.printf(&quot;Sampler: %s%n&quot;, samplerName);
        printWriter.printf(&quot;Response Code: %s%n&quot;, responseCode);
        printWriter.printf(&quot;Response Message: %s%n&quot;, responseMessage);
        printWriter.printf(&quot;Request Headers: %s%n&quot;, requestHeaders);
        printWriter.printf(&quot;Response Time: %d ms%n&quot;, responseTime);
        printWriter.printf(&quot;Request URL: %s%n&quot;, requestUrl);
        printWriter.printf(&quot;Response Body: %s%n&quot;, responseBody);
        if (authToken != null) {
            printWriter.printf(&quot;Authorization header: Bearer %s%n&quot;, authToken);
        }
        if (queryValue != null) {
            printWriter.printf(&quot;Query value: %s%n&quot;, queryValue);
        }

        // Close the PrintWriter
        printWriter.close();
    } catch (IOException e) {
        // Print stack trace in case of an exception
        e.printStackTrace();
        log.error(&quot;Error writing to log file: &quot; + e.getMessage());
    }
}

// Define the path to your log file
String logFilePath = &quot;C:\\Users\\Splpt 708\\Desktop\\LapTopBackUP02-07-2024\\apache-jmeter-5.6.3\\bin\\jmeter.log&quot;;

// Capture necessary information
String samplerName = prev.getSampleLabel();  // Gets the name of the sampler
String responseCode = prev.getResponseCode(); // Gets the response code
String responseMessage = prev.getResponseMessage(); // Gets the response message
String requestHeaders = sampler.getHeaderManager().getHeaders().toString(); // Gets the request headers
long responseTime = prev.getTime(); // Gets the response time
String requestUrl = sampler.getUrl().toString(); // Gets the request URL
String responseBody = prev.getResponseDataAsString(); // Gets the response body
String authToken = vars.get(&quot;authToken&quot;); // Example custom variable
String queryValue = vars.get(&quot;queryValue&quot;); // Example custom variable

// Call the logging function
logRequestDetails(logFilePath, samplerName, responseCode, responseMessage, requestHeaders, responseTime, requestUrl, responseBody, authToken, queryValue);
</stringProp>
        <stringProp name="scriptLanguage">groovy</stringProp>
      </JSR223PostProcessor>
      <hashTree/>
      <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="script">import org.apache.jmeter.assertions.AssertionResult;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.io.IOException;

// Example assertion result (replace with actual data)
AssertionResult assertionResult = prev.getAssertionResults()[0]; // Assuming there&apos;s only one assertion result

// Specify the CSV file path
String csvFilePath = &quot;C:/Users/Splpt 708/Desktop/LapTopBackUP02-07-2024/AsiaNext-APi/jmter/AssertionresultsFromScripts.csv&quot;;

// Write to the CSV file
try {
    FileWriter fileWriter = new FileWriter(csvFilePath, true); // Open in append mode
    PrintWriter printWriter = new PrintWriter(fileWriter);
    printWriter.printf(&quot;%s,%s,%s\n&quot;, assertionResult.getName(), assertionResult.getFailureMessage(), assertionResult.isFailure());
    printWriter.close();
} catch (IOException e) {
    log.error(&quot;Error writing to CSV file&quot;, e);
}
</stringProp>
      </BeanShellPostProcessor>
      <hashTree/>
      <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
        <stringProp name="scriptLanguage">groovy</stringProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="cacheKey">true</stringProp>
        <stringProp name="script">import org.apache.jmeter.protocol.http.sampler.HTTPSampleResult

try {
    // Capture necessary information
    String samplerName = prev.getSampleLabel()  // Gets the name of the sampler
    String responseCode = prev.getResponseCode() // Gets the response code
    String responseMessage = prev.getResponseMessage() // Gets the response message
    String requestHeaders = sampler.getHeaderManager().getHeaders().toString() // Gets the request headers
    long responseTime = prev.getTime() // Gets the response time
    String requestUrl = sampler.getUrl().toString() // Gets the request URL
    String responseBody = prev.getResponseDataAsString() // Gets the response body
    String requestBody = sampler.getArguments().toString() // Gets the request body

    // Print to console (GUI)
    println(&quot;Sampler: &quot; + samplerName)
    println(&quot;Response Code: &quot; + responseCode)
    println(&quot;Response Message: &quot; + responseMessage)
    println(&quot;Request Headers: &quot; + requestHeaders)
    println(&quot;Request Body: &quot; + requestBody)
    println(&quot;Response Time: &quot; + responseTime + &quot; ms&quot;)
    println(&quot;Request URL: &quot; + requestUrl)
    println(&quot;Response Body: &quot; + responseBody)

    // Log messages to the jmeter.log file
    log.info(&quot;Sampler: &quot; + samplerName)
    log.info(&quot;Response Code: &quot; + responseCode)
    log.info(&quot;Response Message: &quot; + responseMessage)
    log.info(&quot;Request Headers: &quot; + requestHeaders)
    log.info(&quot;Request Body: &quot; + requestBody)
    log.info(&quot;Response Time: &quot; + responseTime + &quot; ms&quot;)
    log.info(&quot;Request URL: &quot; + requestUrl)
    log.info(&quot;Response Body: &quot; + responseBody)
} catch (Exception e) {
    log.error(&quot;Error in JSR223 PostProcessor: &quot; + e.getMessage())
    throw e
}
</stringProp>
      </JSR223PostProcessor>
      <hashTree/>
      <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
        <stringProp name="scriptLanguage">groovy</stringProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="cacheKey">true</stringProp>
        <stringProp name="script">import org.apache.jmeter.samplers.SampleResult
import org.apache.jmeter.assertions.AssertionResult
import java.nio.file.*

// Function to log details
def logDetails(result) {
    def logFile = Paths.get(&quot;C:/Users/Splpt 708/Desktop/LapTopBackUP02-07-2024/apache-jmeter-5.6.3/bin/jmeter.log&quot;)
    
    // Formatting timestamp
    def timestamp = new Date().format(&quot;yyyy-MM-dd HH:mm:ss&quot;)
    
    // Collect assertion results
    def assertionResults = result.getAssertionResults().collect { AssertionResult ar -&gt;
        &quot;Assertion: ${ar.getName()} - ${ar.isFailure() ? &apos;FAILED&apos; : &apos;PASSED&apos;}&quot;
    }.join(&apos;\n&apos;)
    
    if (assertionResults.isEmpty()) {
        assertionResults = &quot;No assertions found&quot;
    }
    
    // Construct details string
    def details = &quot;&quot;&quot;\
    Timestamp: ${timestamp}
    Sampler: ${result.getSampleLabel()}
    Response Code: ${result.getResponseCode()}
    Response Message: ${result.getResponseMessage()}
    Request Headers:
    ${result.getRequestHeaders()}
    Response Time: ${result.getTime()} ms
    Request URL: ${result.getUrlAsString()}
    Response Body:
    ${result.getResponseDataAsString()}
    Assertion Results:
    ${assertionResults}
    &quot;&quot;&quot;
    
    // Write to log file
    try {
        Files.write(logFile, details.getBytes(), StandardOpenOption.CREATE, StandardOpenOption.APPEND)
    } catch (Exception ex) {
        println(&quot;Failed to write to log file: ${ex.message}&quot;)
    }
}

// Log details of the current sample
logDetails(prev)
</stringProp>
      </JSR223PostProcessor>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
